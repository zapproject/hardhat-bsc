{"version":3,"file":"jsbi-umd.js","sources":["../tsc-out/jsbi.mjs"],"sourcesContent":["// Copyright 2018 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the “License”);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// <https://apache.org/licenses/LICENSE-2.0>.\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an “AS IS” BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nclass JSBI extends Array {\n    constructor(length, sign) {\n        super(length);\n        this.sign = sign;\n        // Explicitly set the prototype as per\n        // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, JSBI.prototype);\n        if (length > JSBI.__kMaxLength) {\n            throw new RangeError('Maximum BigInt size exceeded');\n        }\n    }\n    static BigInt(arg) {\n        if (typeof arg === 'number') {\n            if (arg === 0)\n                return JSBI.__zero();\n            if (JSBI.__isOneDigitInt(arg)) {\n                if (arg < 0) {\n                    return JSBI.__oneDigit(-arg, true);\n                }\n                return JSBI.__oneDigit(arg, false);\n            }\n            if (!Number.isFinite(arg) || Math.floor(arg) !== arg) {\n                throw new RangeError('The number ' + arg + ' cannot be converted to ' +\n                    'BigInt because it is not an integer');\n            }\n            return JSBI.__fromDouble(arg);\n        }\n        else if (typeof arg === 'string') {\n            const result = JSBI.__fromString(arg);\n            if (result === null) {\n                throw new SyntaxError('Cannot convert ' + arg + ' to a BigInt');\n            }\n            return result;\n        }\n        else if (typeof arg === 'boolean') {\n            if (arg === true) {\n                return JSBI.__oneDigit(1, false);\n            }\n            return JSBI.__zero();\n        }\n        else if (typeof arg === 'object') {\n            if (arg.constructor === JSBI)\n                return arg;\n            const primitive = JSBI.__toPrimitive(arg);\n            return JSBI.BigInt(primitive);\n        }\n        throw new TypeError('Cannot convert ' + arg + ' to a BigInt');\n    }\n    toDebugString() {\n        const result = ['BigInt['];\n        for (const digit of this) {\n            result.push((digit ? (digit >>> 0).toString(16) : digit) + ', ');\n        }\n        result.push(']');\n        return result.join('');\n    }\n    toString(radix = 10) {\n        if (radix < 2 || radix > 36) {\n            throw new RangeError('toString() radix argument must be between 2 and 36');\n        }\n        if (this.length === 0)\n            return '0';\n        if ((radix & (radix - 1)) === 0) {\n            return JSBI.__toStringBasePowerOfTwo(this, radix);\n        }\n        return JSBI.__toStringGeneric(this, radix, false);\n    }\n    valueOf() {\n        throw new Error('Convert JSBI instances to native numbers using `toNumber`.');\n    }\n    // Equivalent of \"Number(my_bigint)\" in the native implementation.\n    // TODO: add more tests\n    static toNumber(x) {\n        const xLength = x.length;\n        if (xLength === 0)\n            return 0;\n        if (xLength === 1) {\n            const value = x.__unsignedDigit(0);\n            return x.sign ? -value : value;\n        }\n        const xMsd = x.__digit(xLength - 1);\n        const msdLeadingZeros = JSBI.__clz30(xMsd);\n        const xBitLength = xLength * 30 - msdLeadingZeros;\n        if (xBitLength > 1024)\n            return x.sign ? -Infinity : Infinity;\n        let exponent = xBitLength - 1;\n        let currentDigit = xMsd;\n        let digitIndex = xLength - 1;\n        const shift = msdLeadingZeros + 3;\n        let mantissaHigh = (shift === 32) ? 0 : currentDigit << shift;\n        mantissaHigh >>>= 12;\n        const mantissaHighBitsUnset = shift - 12;\n        let mantissaLow = (shift >= 12) ? 0 : (currentDigit << (20 + shift));\n        let mantissaLowBitsUnset = 20 + shift;\n        if (mantissaHighBitsUnset > 0 && digitIndex > 0) {\n            digitIndex--;\n            currentDigit = x.__digit(digitIndex);\n            mantissaHigh |= (currentDigit >>> (30 - mantissaHighBitsUnset));\n            mantissaLow = currentDigit << mantissaHighBitsUnset + 2;\n            mantissaLowBitsUnset = mantissaHighBitsUnset + 2;\n        }\n        while (mantissaLowBitsUnset > 0 && digitIndex > 0) {\n            digitIndex--;\n            currentDigit = x.__digit(digitIndex);\n            if (mantissaLowBitsUnset >= 30) {\n                mantissaLow |= (currentDigit << (mantissaLowBitsUnset - 30));\n            }\n            else {\n                mantissaLow |= (currentDigit >>> (30 - mantissaLowBitsUnset));\n            }\n            mantissaLowBitsUnset -= 30;\n        }\n        const rounding = JSBI.__decideRounding(x, mantissaLowBitsUnset, digitIndex, currentDigit);\n        if (rounding === 1 || (rounding === 0 && (mantissaLow & 1) === 1)) {\n            mantissaLow = (mantissaLow + 1) >>> 0;\n            if (mantissaLow === 0) {\n                // Incrementing mantissaLow overflowed.\n                mantissaHigh++;\n                if ((mantissaHigh >>> 20) !== 0) {\n                    // Incrementing mantissaHigh overflowed.\n                    mantissaHigh = 0;\n                    exponent++;\n                    if (exponent > 1023) {\n                        // Incrementing the exponent overflowed.\n                        return x.sign ? -Infinity : Infinity;\n                    }\n                }\n            }\n        }\n        const signBit = x.sign ? (1 << 31) : 0;\n        exponent = (exponent + 0x3FF) << 20;\n        JSBI.__kBitConversionInts[1] = signBit | exponent | mantissaHigh;\n        JSBI.__kBitConversionInts[0] = mantissaLow;\n        return JSBI.__kBitConversionDouble[0];\n    }\n    // Operations.\n    static unaryMinus(x) {\n        if (x.length === 0)\n            return x;\n        const result = x.__copy();\n        result.sign = !x.sign;\n        return result;\n    }\n    static bitwiseNot(x) {\n        if (x.sign) {\n            // ~(-x) == ~(~(x-1)) == x-1\n            return JSBI.__absoluteSubOne(x).__trim();\n        }\n        // ~x == -x-1 == -(x+1)\n        return JSBI.__absoluteAddOne(x, true);\n    }\n    static exponentiate(x, y) {\n        if (y.sign) {\n            throw new RangeError('Exponent must be positive');\n        }\n        if (y.length === 0) {\n            return JSBI.__oneDigit(1, false);\n        }\n        if (x.length === 0)\n            return x;\n        if (x.length === 1 && x.__digit(0) === 1) {\n            // (-1) ** even_number == 1.\n            if (x.sign && (y.__digit(0) & 1) === 0) {\n                return JSBI.unaryMinus(x);\n            }\n            // (-1) ** odd_number == -1, 1 ** anything == 1.\n            return x;\n        }\n        // For all bases >= 2, very large exponents would lead to unrepresentable\n        // results.\n        if (y.length > 1)\n            throw new RangeError('BigInt too big');\n        let expValue = y.__unsignedDigit(0);\n        if (expValue === 1)\n            return x;\n        if (expValue >= JSBI.__kMaxLengthBits) {\n            throw new RangeError('BigInt too big');\n        }\n        if (x.length === 1 && x.__digit(0) === 2) {\n            // Fast path for 2^n.\n            const neededDigits = 1 + ((expValue / 30) | 0);\n            const sign = x.sign && ((expValue & 1) !== 0);\n            const result = new JSBI(neededDigits, sign);\n            result.__initializeDigits();\n            // All bits are zero. Now set the n-th bit.\n            const msd = 1 << (expValue % 30);\n            result.__setDigit(neededDigits - 1, msd);\n            return result;\n        }\n        let result = null;\n        let runningSquare = x;\n        // This implicitly sets the result's sign correctly.\n        if ((expValue & 1) !== 0)\n            result = x;\n        expValue >>= 1;\n        for (; expValue !== 0; expValue >>= 1) {\n            runningSquare = JSBI.multiply(runningSquare, runningSquare);\n            if ((expValue & 1) !== 0) {\n                if (result === null) {\n                    result = runningSquare;\n                }\n                else {\n                    result = JSBI.multiply(result, runningSquare);\n                }\n            }\n        }\n        // TODO see if there's a way for tsc to infer this will always happen?\n        return result;\n    }\n    static multiply(x, y) {\n        if (x.length === 0)\n            return x;\n        if (y.length === 0)\n            return y;\n        let resultLength = x.length + y.length;\n        if (x.__clzmsd() + y.__clzmsd() >= 30) {\n            resultLength--;\n        }\n        const result = new JSBI(resultLength, x.sign !== y.sign);\n        result.__initializeDigits();\n        for (let i = 0; i < x.length; i++) {\n            JSBI.__multiplyAccumulate(y, x.__digit(i), result, i);\n        }\n        return result.__trim();\n    }\n    static divide(x, y) {\n        if (y.length === 0)\n            throw new RangeError('Division by zero');\n        if (JSBI.__absoluteCompare(x, y) < 0)\n            return JSBI.__zero();\n        const resultSign = x.sign !== y.sign;\n        const divisor = y.__unsignedDigit(0);\n        let quotient;\n        if (y.length === 1 && divisor <= 0x7FFF) {\n            if (divisor === 1) {\n                return resultSign === x.sign ? x : JSBI.unaryMinus(x);\n            }\n            quotient = JSBI.__absoluteDivSmall(x, divisor, null);\n        }\n        else {\n            quotient = JSBI.__absoluteDivLarge(x, y, true, false);\n        }\n        quotient.sign = resultSign;\n        return quotient.__trim();\n    }\n    static remainder(x, y) {\n        if (y.length === 0)\n            throw new RangeError('Division by zero');\n        if (JSBI.__absoluteCompare(x, y) < 0)\n            return x;\n        const divisor = y.__unsignedDigit(0);\n        if (y.length === 1 && divisor <= 0x7FFF) {\n            if (divisor === 1)\n                return JSBI.__zero();\n            const remainderDigit = JSBI.__absoluteModSmall(x, divisor);\n            if (remainderDigit === 0)\n                return JSBI.__zero();\n            return JSBI.__oneDigit(remainderDigit, x.sign);\n        }\n        const remainder = JSBI.__absoluteDivLarge(x, y, false, true);\n        remainder.sign = x.sign;\n        return remainder.__trim();\n    }\n    static add(x, y) {\n        const sign = x.sign;\n        if (sign === y.sign) {\n            // x + y == x + y\n            // -x + -y == -(x + y)\n            return JSBI.__absoluteAdd(x, y, sign);\n        }\n        // x + -y == x - y == -(y - x)\n        // -x + y == y - x == -(x - y)\n        if (JSBI.__absoluteCompare(x, y) >= 0) {\n            return JSBI.__absoluteSub(x, y, sign);\n        }\n        return JSBI.__absoluteSub(y, x, !sign);\n    }\n    static subtract(x, y) {\n        const sign = x.sign;\n        if (sign !== y.sign) {\n            // x - (-y) == x + y\n            // (-x) - y == -(x + y)\n            return JSBI.__absoluteAdd(x, y, sign);\n        }\n        // x - y == -(y - x)\n        // (-x) - (-y) == y - x == -(x - y)\n        if (JSBI.__absoluteCompare(x, y) >= 0) {\n            return JSBI.__absoluteSub(x, y, sign);\n        }\n        return JSBI.__absoluteSub(y, x, !sign);\n    }\n    static leftShift(x, y) {\n        if (y.length === 0 || x.length === 0)\n            return x;\n        if (y.sign)\n            return JSBI.__rightShiftByAbsolute(x, y);\n        return JSBI.__leftShiftByAbsolute(x, y);\n    }\n    static signedRightShift(x, y) {\n        if (y.length === 0 || x.length === 0)\n            return x;\n        if (y.sign)\n            return JSBI.__leftShiftByAbsolute(x, y);\n        return JSBI.__rightShiftByAbsolute(x, y);\n    }\n    static unsignedRightShift() {\n        throw new TypeError('BigInts have no unsigned right shift; use >> instead');\n    }\n    static lessThan(x, y) {\n        return JSBI.__compareToBigInt(x, y) < 0;\n    }\n    static lessThanOrEqual(x, y) {\n        return JSBI.__compareToBigInt(x, y) <= 0;\n    }\n    static greaterThan(x, y) {\n        return JSBI.__compareToBigInt(x, y) > 0;\n    }\n    static greaterThanOrEqual(x, y) {\n        return JSBI.__compareToBigInt(x, y) >= 0;\n    }\n    static equal(x, y) {\n        if (x.sign !== y.sign)\n            return false;\n        if (x.length !== y.length)\n            return false;\n        for (let i = 0; i < x.length; i++) {\n            if (x.__digit(i) !== y.__digit(i))\n                return false;\n        }\n        return true;\n    }\n    static notEqual(x, y) {\n        return !JSBI.equal(x, y);\n    }\n    static bitwiseAnd(x, y) {\n        if (!x.sign && !y.sign) {\n            return JSBI.__absoluteAnd(x, y).__trim();\n        }\n        else if (x.sign && y.sign) {\n            const resultLength = Math.max(x.length, y.length) + 1;\n            // (-x) & (-y) == ~(x-1) & ~(y-1) == ~((x-1) | (y-1))\n            // == -(((x-1) | (y-1)) + 1)\n            let result = JSBI.__absoluteSubOne(x, resultLength);\n            const y1 = JSBI.__absoluteSubOne(y);\n            result = JSBI.__absoluteOr(result, y1, result);\n            return JSBI.__absoluteAddOne(result, true, result).__trim();\n        }\n        // Assume that x is the positive BigInt.\n        if (x.sign) {\n            [x, y] = [y, x];\n        }\n        // x & (-y) == x & ~(y-1) == x &~ (y-1)\n        return JSBI.__absoluteAndNot(x, JSBI.__absoluteSubOne(y)).__trim();\n    }\n    static bitwiseXor(x, y) {\n        if (!x.sign && !y.sign) {\n            return JSBI.__absoluteXor(x, y).__trim();\n        }\n        else if (x.sign && y.sign) {\n            // (-x) ^ (-y) == ~(x-1) ^ ~(y-1) == (x-1) ^ (y-1)\n            const resultLength = Math.max(x.length, y.length);\n            const result = JSBI.__absoluteSubOne(x, resultLength);\n            const y1 = JSBI.__absoluteSubOne(y);\n            return JSBI.__absoluteXor(result, y1, result).__trim();\n        }\n        const resultLength = Math.max(x.length, y.length) + 1;\n        // Assume that x is the positive BigInt.\n        if (x.sign) {\n            [x, y] = [y, x];\n        }\n        // x ^ (-y) == x ^ ~(y-1) == ~(x ^ (y-1)) == -((x ^ (y-1)) + 1)\n        let result = JSBI.__absoluteSubOne(y, resultLength);\n        result = JSBI.__absoluteXor(result, x, result);\n        return JSBI.__absoluteAddOne(result, true, result).__trim();\n    }\n    static bitwiseOr(x, y) {\n        const resultLength = Math.max(x.length, y.length);\n        if (!x.sign && !y.sign) {\n            return JSBI.__absoluteOr(x, y).__trim();\n        }\n        else if (x.sign && y.sign) {\n            // (-x) | (-y) == ~(x-1) | ~(y-1) == ~((x-1) & (y-1))\n            // == -(((x-1) & (y-1)) + 1)\n            let result = JSBI.__absoluteSubOne(x, resultLength);\n            const y1 = JSBI.__absoluteSubOne(y);\n            result = JSBI.__absoluteAnd(result, y1, result);\n            return JSBI.__absoluteAddOne(result, true, result).__trim();\n        }\n        // Assume that x is the positive BigInt.\n        if (x.sign) {\n            [x, y] = [y, x];\n        }\n        // x | (-y) == x | ~(y-1) == ~((y-1) &~ x) == -(((y-1) ~& x) + 1)\n        let result = JSBI.__absoluteSubOne(y, resultLength);\n        result = JSBI.__absoluteAndNot(result, x, result);\n        return JSBI.__absoluteAddOne(result, true, result).__trim();\n    }\n    static asIntN(n, x) {\n        if (x.length === 0)\n            return x;\n        n = Math.floor(n);\n        if (n < 0) {\n            throw new RangeError('Invalid value: not (convertible to) a safe integer');\n        }\n        if (n === 0)\n            return JSBI.__zero();\n        // If {x} has less than {n} bits, return it directly.\n        if (n >= JSBI.__kMaxLengthBits)\n            return x;\n        const neededLength = ((n + 29) / 30) | 0;\n        if (x.length < neededLength)\n            return x;\n        const topDigit = x.__unsignedDigit(neededLength - 1);\n        const compareDigit = 1 << ((n - 1) % 30);\n        if (x.length === neededLength && topDigit < compareDigit)\n            return x;\n        // Otherwise truncate and simulate two's complement.\n        const hasBit = (topDigit & compareDigit) === compareDigit;\n        if (!hasBit)\n            return JSBI.__truncateToNBits(n, x);\n        if (!x.sign)\n            return JSBI.__truncateAndSubFromPowerOfTwo(n, x, true);\n        if ((topDigit & (compareDigit - 1)) === 0) {\n            for (let i = neededLength - 2; i >= 0; i--) {\n                if (x.__digit(i) !== 0) {\n                    return JSBI.__truncateAndSubFromPowerOfTwo(n, x, false);\n                }\n            }\n            if (x.length === neededLength && topDigit === compareDigit)\n                return x;\n            return JSBI.__truncateToNBits(n, x);\n        }\n        return JSBI.__truncateAndSubFromPowerOfTwo(n, x, false);\n    }\n    static asUintN(n, x) {\n        if (x.length === 0)\n            return x;\n        n = Math.floor(n);\n        if (n < 0) {\n            throw new RangeError('Invalid value: not (convertible to) a safe integer');\n        }\n        if (n === 0)\n            return JSBI.__zero();\n        // If {x} is negative, simulate two's complement representation.\n        if (x.sign) {\n            if (n > JSBI.__kMaxLengthBits) {\n                throw new RangeError('BigInt too big');\n            }\n            return JSBI.__truncateAndSubFromPowerOfTwo(n, x, false);\n        }\n        // If {x} is positive and has up to {n} bits, return it directly.\n        if (n >= JSBI.__kMaxLengthBits)\n            return x;\n        const neededLength = ((n + 29) / 30) | 0;\n        if (x.length < neededLength)\n            return x;\n        const bitsInTopDigit = n % 30;\n        if (x.length == neededLength) {\n            if (bitsInTopDigit === 0)\n                return x;\n            const topDigit = x.__digit(neededLength - 1);\n            if ((topDigit >>> bitsInTopDigit) === 0)\n                return x;\n        }\n        // Otherwise, truncate.\n        return JSBI.__truncateToNBits(n, x);\n    }\n    // Operators.\n    static ADD(x, y) {\n        x = JSBI.__toPrimitive(x);\n        y = JSBI.__toPrimitive(y);\n        if (typeof x === 'string') {\n            if (typeof y !== 'string')\n                y = y.toString();\n            return x + y;\n        }\n        if (typeof y === 'string') {\n            return x.toString() + y;\n        }\n        x = JSBI.__toNumeric(x);\n        y = JSBI.__toNumeric(y);\n        if (JSBI.__isBigInt(x) && JSBI.__isBigInt(y)) {\n            return JSBI.add(x, y);\n        }\n        if (typeof x === 'number' && typeof y === 'number') {\n            return x + y;\n        }\n        throw new TypeError('Cannot mix BigInt and other types, use explicit conversions');\n    }\n    static LT(x, y) {\n        return JSBI.__compare(x, y, 0);\n    }\n    static LE(x, y) {\n        return JSBI.__compare(x, y, 1);\n    }\n    static GT(x, y) {\n        return JSBI.__compare(x, y, 2);\n    }\n    static GE(x, y) {\n        return JSBI.__compare(x, y, 3);\n    }\n    static EQ(x, y) {\n        while (true) {\n            if (JSBI.__isBigInt(x)) {\n                if (JSBI.__isBigInt(y))\n                    return JSBI.equal(x, y);\n                return JSBI.EQ(y, x);\n            }\n            else if (typeof x === 'number') {\n                if (JSBI.__isBigInt(y))\n                    return JSBI.__equalToNumber(y, x);\n                if (typeof y !== 'object')\n                    return x == y;\n                y = JSBI.__toPrimitive(y);\n            }\n            else if (typeof x === 'string') {\n                if (JSBI.__isBigInt(y)) {\n                    x = JSBI.__fromString(x);\n                    if (x === null)\n                        return false;\n                    return JSBI.equal(x, y);\n                }\n                if (typeof y !== 'object')\n                    return x == y;\n                y = JSBI.__toPrimitive(y);\n            }\n            else if (typeof x === 'boolean') {\n                if (JSBI.__isBigInt(y))\n                    return JSBI.__equalToNumber(y, +x);\n                if (typeof y !== 'object')\n                    return x == y;\n                y = JSBI.__toPrimitive(y);\n            }\n            else if (typeof x === 'symbol') {\n                if (JSBI.__isBigInt(y))\n                    return false;\n                if (typeof y !== 'object')\n                    return x == y;\n                y = JSBI.__toPrimitive(y);\n            }\n            else if (typeof x === 'object') {\n                if (typeof y === 'object' && y.constructor !== JSBI)\n                    return x == y;\n                x = JSBI.__toPrimitive(x);\n            }\n            else {\n                return x == y;\n            }\n        }\n    }\n    static NE(x, y) {\n        return !JSBI.EQ(x, y);\n    }\n    // Helpers.\n    static __zero() {\n        return new JSBI(0, false);\n    }\n    static __oneDigit(value, sign) {\n        const result = new JSBI(1, sign);\n        result.__setDigit(0, value);\n        return result;\n    }\n    __copy() {\n        const result = new JSBI(this.length, this.sign);\n        for (let i = 0; i < this.length; i++) {\n            result[i] = this[i];\n        }\n        return result;\n    }\n    __trim() {\n        let newLength = this.length;\n        let last = this[newLength - 1];\n        while (last === 0) {\n            newLength--;\n            last = this[newLength - 1];\n            this.pop();\n        }\n        if (newLength === 0)\n            this.sign = false;\n        return this;\n    }\n    __initializeDigits() {\n        for (let i = 0; i < this.length; i++) {\n            this[i] = 0;\n        }\n    }\n    static __decideRounding(x, mantissaBitsUnset, digitIndex, currentDigit) {\n        if (mantissaBitsUnset > 0)\n            return -1;\n        let topUnconsumedBit;\n        if (mantissaBitsUnset < 0) {\n            topUnconsumedBit = -mantissaBitsUnset - 1;\n        }\n        else {\n            // {currentDigit} fit the mantissa exactly; look at the next digit.\n            if (digitIndex === 0)\n                return -1;\n            digitIndex--;\n            currentDigit = x.__digit(digitIndex);\n            topUnconsumedBit = 29;\n        }\n        // If the most significant remaining bit is 0, round down.\n        let mask = 1 << topUnconsumedBit;\n        if ((currentDigit & mask) === 0)\n            return -1;\n        // If any other remaining bit is set, round up.\n        mask -= 1;\n        if ((currentDigit & mask) !== 0)\n            return 1;\n        while (digitIndex > 0) {\n            digitIndex--;\n            if (x.__digit(digitIndex) !== 0)\n                return 1;\n        }\n        return 0;\n    }\n    static __fromDouble(value) {\n        const sign = value < 0;\n        JSBI.__kBitConversionDouble[0] = value;\n        const rawExponent = (JSBI.__kBitConversionInts[1] >>> 20) & 0x7FF;\n        const exponent = rawExponent - 0x3FF;\n        const digits = ((exponent / 30) | 0) + 1;\n        const result = new JSBI(digits, sign);\n        const kHiddenBit = 0x00100000;\n        let mantissaHigh = (JSBI.__kBitConversionInts[1] & 0xFFFFF) | kHiddenBit;\n        let mantissaLow = JSBI.__kBitConversionInts[0];\n        const kMantissaHighTopBit = 20;\n        // 0-indexed position of most significant bit in most significant digit.\n        const msdTopBit = exponent % 30;\n        // Number of unused bits in the mantissa. We'll keep them shifted to the\n        // left (i.e. most significant part).\n        let remainingMantissaBits = 0;\n        // Next digit under construction.\n        let digit;\n        // First, build the MSD by shifting the mantissa appropriately.\n        if (msdTopBit < kMantissaHighTopBit) {\n            const shift = kMantissaHighTopBit - msdTopBit;\n            remainingMantissaBits = shift + 32;\n            digit = mantissaHigh >>> shift;\n            mantissaHigh = (mantissaHigh << (32 - shift)) | (mantissaLow >>> shift);\n            mantissaLow = mantissaLow << (32 - shift);\n        }\n        else if (msdTopBit === kMantissaHighTopBit) {\n            remainingMantissaBits = 32;\n            digit = mantissaHigh;\n            mantissaHigh = mantissaLow;\n            mantissaLow = 0;\n        }\n        else {\n            const shift = msdTopBit - kMantissaHighTopBit;\n            remainingMantissaBits = 32 - shift;\n            digit = (mantissaHigh << shift) | (mantissaLow >>> (32 - shift));\n            mantissaHigh = mantissaLow << shift;\n            mantissaLow = 0;\n        }\n        result.__setDigit(digits - 1, digit);\n        // Then fill in the rest of the digits.\n        for (let digitIndex = digits - 2; digitIndex >= 0; digitIndex--) {\n            if (remainingMantissaBits > 0) {\n                remainingMantissaBits -= 30;\n                digit = mantissaHigh >>> 2;\n                mantissaHigh = (mantissaHigh << 30) | (mantissaLow >>> 2);\n                mantissaLow = (mantissaLow << 30);\n            }\n            else {\n                digit = 0;\n            }\n            result.__setDigit(digitIndex, digit);\n        }\n        return result.__trim();\n    }\n    static __isWhitespace(c) {\n        if (c <= 0x0D && c >= 0x09)\n            return true;\n        if (c <= 0x9F)\n            return c === 0x20;\n        if (c <= 0x01FFFF) {\n            return c === 0xA0 || c === 0x1680;\n        }\n        if (c <= 0x02FFFF) {\n            c &= 0x01FFFF;\n            return c <= 0x0A || c === 0x28 || c === 0x29 || c === 0x2F ||\n                c === 0x5F || c === 0x1000;\n        }\n        return c === 0xFEFF;\n    }\n    static __fromString(string, radix = 0) {\n        let sign = 0;\n        let leadingZero = false;\n        const length = string.length;\n        let cursor = 0;\n        if (cursor === length)\n            return JSBI.__zero();\n        let current = string.charCodeAt(cursor);\n        // Skip whitespace.\n        while (JSBI.__isWhitespace(current)) {\n            if (++cursor === length)\n                return JSBI.__zero();\n            current = string.charCodeAt(cursor);\n        }\n        // Detect radix.\n        if (current === 0x2B) { // '+'\n            if (++cursor === length)\n                return null;\n            current = string.charCodeAt(cursor);\n            sign = 1;\n        }\n        else if (current === 0x2D) { // '-'\n            if (++cursor === length)\n                return null;\n            current = string.charCodeAt(cursor);\n            sign = -1;\n        }\n        if (radix === 0) {\n            radix = 10;\n            if (current === 0x30) { // '0'\n                if (++cursor === length)\n                    return JSBI.__zero();\n                current = string.charCodeAt(cursor);\n                if (current === 0x58 || current === 0x78) { // 'X' or 'x'\n                    radix = 16;\n                    if (++cursor === length)\n                        return null;\n                    current = string.charCodeAt(cursor);\n                }\n                else if (current === 0x4F || current === 0x6F) { // 'O' or 'o'\n                    radix = 8;\n                    if (++cursor === length)\n                        return null;\n                    current = string.charCodeAt(cursor);\n                }\n                else if (current === 0x42 || current === 0x62) { // 'B' or 'b'\n                    radix = 2;\n                    if (++cursor === length)\n                        return null;\n                    current = string.charCodeAt(cursor);\n                }\n                else {\n                    leadingZero = true;\n                }\n            }\n        }\n        else if (radix === 16) {\n            if (current === 0x30) { // '0'\n                // Allow \"0x\" prefix.\n                if (++cursor === length)\n                    return JSBI.__zero();\n                current = string.charCodeAt(cursor);\n                if (current === 0x58 || current === 0x78) { // 'X' or 'x'\n                    if (++cursor === length)\n                        return null;\n                    current = string.charCodeAt(cursor);\n                }\n                else {\n                    leadingZero = true;\n                }\n            }\n        }\n        if (sign !== 0 && radix !== 10)\n            return null;\n        // Skip leading zeros.\n        while (current === 0x30) {\n            leadingZero = true;\n            if (++cursor === length)\n                return JSBI.__zero();\n            current = string.charCodeAt(cursor);\n        }\n        // Allocate result.\n        const chars = length - cursor;\n        let bitsPerChar = JSBI.__kMaxBitsPerChar[radix];\n        let roundup = JSBI.__kBitsPerCharTableMultiplier - 1;\n        if (chars > (1 << 30) / bitsPerChar)\n            return null;\n        const bitsMin = (bitsPerChar * chars + roundup) >>> JSBI.__kBitsPerCharTableShift;\n        const resultLength = ((bitsMin + 29) / 30) | 0;\n        const result = new JSBI(resultLength, false);\n        // Parse.\n        const limDigit = radix < 10 ? radix : 10;\n        const limAlpha = radix > 10 ? radix - 10 : 0;\n        if ((radix & (radix - 1)) === 0) {\n            // Power-of-two radix.\n            bitsPerChar >>= JSBI.__kBitsPerCharTableShift;\n            const parts = [];\n            const partsBits = [];\n            let done = false;\n            do {\n                let part = 0;\n                let bits = 0;\n                while (true) {\n                    let d;\n                    if (((current - 48) >>> 0) < limDigit) {\n                        d = current - 48;\n                    }\n                    else if ((((current | 32) - 97) >>> 0) < limAlpha) {\n                        d = (current | 32) - 87;\n                    }\n                    else {\n                        done = true;\n                        break;\n                    }\n                    bits += bitsPerChar;\n                    part = (part << bitsPerChar) | d;\n                    if (++cursor === length) {\n                        done = true;\n                        break;\n                    }\n                    current = string.charCodeAt(cursor);\n                    if (bits + bitsPerChar > 30)\n                        break;\n                }\n                parts.push(part);\n                partsBits.push(bits);\n            } while (!done);\n            JSBI.__fillFromParts(result, parts, partsBits);\n        }\n        else {\n            result.__initializeDigits();\n            let done = false;\n            let charsSoFar = 0;\n            do {\n                let part = 0;\n                let multiplier = 1;\n                while (true) {\n                    let d;\n                    if (((current - 48) >>> 0) < limDigit) {\n                        d = current - 48;\n                    }\n                    else if ((((current | 32) - 97) >>> 0) < limAlpha) {\n                        d = (current | 32) - 87;\n                    }\n                    else {\n                        done = true;\n                        break;\n                    }\n                    const m = multiplier * radix;\n                    if (m > 0x3FFFFFFF)\n                        break;\n                    multiplier = m;\n                    part = part * radix + d;\n                    charsSoFar++;\n                    if (++cursor === length) {\n                        done = true;\n                        break;\n                    }\n                    current = string.charCodeAt(cursor);\n                }\n                roundup = JSBI.__kBitsPerCharTableMultiplier * 30 - 1;\n                const digitsSoFar = (((bitsPerChar * charsSoFar + roundup) >>>\n                    JSBI.__kBitsPerCharTableShift) / 30) | 0;\n                result.__inplaceMultiplyAdd(multiplier, part, digitsSoFar);\n            } while (!done);\n        }\n        if (cursor !== length) {\n            if (!JSBI.__isWhitespace(current))\n                return null;\n            for (cursor++; cursor < length; cursor++) {\n                current = string.charCodeAt(cursor);\n                if (!JSBI.__isWhitespace(current))\n                    return null;\n            }\n        }\n        // Get result.\n        result.sign = (sign === -1);\n        return result.__trim();\n    }\n    static __fillFromParts(result, parts, partsBits) {\n        let digitIndex = 0;\n        let digit = 0;\n        let bitsInDigit = 0;\n        for (let i = parts.length - 1; i >= 0; i--) {\n            const part = parts[i];\n            const partBits = partsBits[i];\n            digit |= (part << bitsInDigit);\n            bitsInDigit += partBits;\n            if (bitsInDigit === 30) {\n                result.__setDigit(digitIndex++, digit);\n                bitsInDigit = 0;\n                digit = 0;\n            }\n            else if (bitsInDigit > 30) {\n                result.__setDigit(digitIndex++, digit & 0x3FFFFFFF);\n                bitsInDigit -= 30;\n                digit = part >>> (partBits - bitsInDigit);\n            }\n        }\n        if (digit !== 0) {\n            if (digitIndex >= result.length)\n                throw new Error('implementation bug');\n            result.__setDigit(digitIndex++, digit);\n        }\n        for (; digitIndex < result.length; digitIndex++) {\n            result.__setDigit(digitIndex, 0);\n        }\n    }\n    static __toStringBasePowerOfTwo(x, radix) {\n        const length = x.length;\n        let bits = radix - 1;\n        bits = ((bits >>> 1) & 0x55) + (bits & 0x55);\n        bits = ((bits >>> 2) & 0x33) + (bits & 0x33);\n        bits = ((bits >>> 4) & 0x0F) + (bits & 0x0F);\n        const bitsPerChar = bits;\n        const charMask = radix - 1;\n        const msd = x.__digit(length - 1);\n        const msdLeadingZeros = JSBI.__clz30(msd);\n        const bitLength = length * 30 - msdLeadingZeros;\n        let charsRequired = ((bitLength + bitsPerChar - 1) / bitsPerChar) | 0;\n        if (x.sign)\n            charsRequired++;\n        if (charsRequired > (1 << 28))\n            throw new Error('string too long');\n        const result = new Array(charsRequired);\n        let pos = charsRequired - 1;\n        let digit = 0;\n        let availableBits = 0;\n        for (let i = 0; i < length - 1; i++) {\n            const newDigit = x.__digit(i);\n            const current = (digit | (newDigit << availableBits)) & charMask;\n            result[pos--] = JSBI.__kConversionChars[current];\n            const consumedBits = bitsPerChar - availableBits;\n            digit = newDigit >>> consumedBits;\n            availableBits = 30 - consumedBits;\n            while (availableBits >= bitsPerChar) {\n                result[pos--] = JSBI.__kConversionChars[digit & charMask];\n                digit >>>= bitsPerChar;\n                availableBits -= bitsPerChar;\n            }\n        }\n        const current = (digit | (msd << availableBits)) & charMask;\n        result[pos--] = JSBI.__kConversionChars[current];\n        digit = msd >>> (bitsPerChar - availableBits);\n        while (digit !== 0) {\n            result[pos--] = JSBI.__kConversionChars[digit & charMask];\n            digit >>>= bitsPerChar;\n        }\n        if (x.sign)\n            result[pos--] = '-';\n        if (pos !== -1)\n            throw new Error('implementation bug');\n        return result.join('');\n    }\n    static __toStringGeneric(x, radix, isRecursiveCall) {\n        const length = x.length;\n        if (length === 0)\n            return '';\n        if (length === 1) {\n            let result = x.__unsignedDigit(0).toString(radix);\n            if (isRecursiveCall === false && x.sign) {\n                result = '-' + result;\n            }\n            return result;\n        }\n        const bitLength = length * 30 - JSBI.__clz30(x.__digit(length - 1));\n        const maxBitsPerChar = JSBI.__kMaxBitsPerChar[radix];\n        const minBitsPerChar = maxBitsPerChar - 1;\n        let charsRequired = bitLength * JSBI.__kBitsPerCharTableMultiplier;\n        charsRequired += minBitsPerChar - 1;\n        charsRequired = (charsRequired / minBitsPerChar) | 0;\n        const secondHalfChars = (charsRequired + 1) >> 1;\n        // Divide-and-conquer: split by a power of {radix} that's approximately\n        // the square root of {x}, then recurse.\n        const conqueror = JSBI.exponentiate(JSBI.__oneDigit(radix, false), JSBI.__oneDigit(secondHalfChars, false));\n        let quotient;\n        let secondHalf;\n        const divisor = conqueror.__unsignedDigit(0);\n        if (conqueror.length === 1 && divisor <= 0x7FFF) {\n            quotient = new JSBI(x.length, false);\n            quotient.__initializeDigits();\n            let remainder = 0;\n            for (let i = x.length * 2 - 1; i >= 0; i--) {\n                const input = (remainder << 15) | x.__halfDigit(i);\n                quotient.__setHalfDigit(i, (input / divisor) | 0);\n                remainder = (input % divisor) | 0;\n            }\n            secondHalf = remainder.toString(radix);\n        }\n        else {\n            const divisionResult = JSBI.__absoluteDivLarge(x, conqueror, true, true);\n            quotient = divisionResult.quotient;\n            const remainder = divisionResult.remainder.__trim();\n            secondHalf = JSBI.__toStringGeneric(remainder, radix, true);\n        }\n        quotient.__trim();\n        let firstHalf = JSBI.__toStringGeneric(quotient, radix, true);\n        while (secondHalf.length < secondHalfChars) {\n            secondHalf = '0' + secondHalf;\n        }\n        if (isRecursiveCall === false && x.sign) {\n            firstHalf = '-' + firstHalf;\n        }\n        return firstHalf + secondHalf;\n    }\n    static __unequalSign(leftNegative) {\n        return leftNegative ? -1 : 1;\n    }\n    static __absoluteGreater(bothNegative) {\n        return bothNegative ? -1 : 1;\n    }\n    static __absoluteLess(bothNegative) {\n        return bothNegative ? 1 : -1;\n    }\n    static __compareToBigInt(x, y) {\n        const xSign = x.sign;\n        if (xSign !== y.sign)\n            return JSBI.__unequalSign(xSign);\n        const result = JSBI.__absoluteCompare(x, y);\n        if (result > 0)\n            return JSBI.__absoluteGreater(xSign);\n        if (result < 0)\n            return JSBI.__absoluteLess(xSign);\n        return 0;\n    }\n    static __compareToNumber(x, y) {\n        if (JSBI.__isOneDigitInt(y)) {\n            const xSign = x.sign;\n            const ySign = (y < 0);\n            if (xSign !== ySign)\n                return JSBI.__unequalSign(xSign);\n            if (x.length === 0) {\n                if (ySign)\n                    throw new Error('implementation bug');\n                return y === 0 ? 0 : -1;\n            }\n            // Any multi-digit BigInt is bigger than an int32.\n            if (x.length > 1)\n                return JSBI.__absoluteGreater(xSign);\n            const yAbs = Math.abs(y);\n            const xDigit = x.__unsignedDigit(0);\n            if (xDigit > yAbs)\n                return JSBI.__absoluteGreater(xSign);\n            if (xDigit < yAbs)\n                return JSBI.__absoluteLess(xSign);\n            return 0;\n        }\n        return JSBI.__compareToDouble(x, y);\n    }\n    static __compareToDouble(x, y) {\n        if (y !== y)\n            return y; // NaN.\n        if (y === Infinity)\n            return -1;\n        if (y === -Infinity)\n            return 1;\n        const xSign = x.sign;\n        const ySign = (y < 0);\n        if (xSign !== ySign)\n            return JSBI.__unequalSign(xSign);\n        if (y === 0) {\n            throw new Error('implementation bug: should be handled elsewhere');\n        }\n        if (x.length === 0)\n            return -1;\n        JSBI.__kBitConversionDouble[0] = y;\n        const rawExponent = (JSBI.__kBitConversionInts[1] >>> 20) & 0x7FF;\n        if (rawExponent === 0x7FF) {\n            throw new Error('implementation bug: handled elsewhere');\n        }\n        const exponent = rawExponent - 0x3FF;\n        if (exponent < 0) {\n            // The absolute value of y is less than 1. Only 0n has an absolute\n            // value smaller than that, but we've already covered that case.\n            return JSBI.__absoluteGreater(xSign);\n        }\n        const xLength = x.length;\n        let xMsd = x.__digit(xLength - 1);\n        const msdLeadingZeros = JSBI.__clz30(xMsd);\n        const xBitLength = xLength * 30 - msdLeadingZeros;\n        const yBitLength = exponent + 1;\n        if (xBitLength < yBitLength)\n            return JSBI.__absoluteLess(xSign);\n        if (xBitLength > yBitLength)\n            return JSBI.__absoluteGreater(xSign);\n        // Same sign, same bit length. Shift mantissa to align with x and compare\n        // bit for bit.\n        const kHiddenBit = 0x00100000;\n        let mantissaHigh = (JSBI.__kBitConversionInts[1] & 0xFFFFF) | kHiddenBit;\n        let mantissaLow = JSBI.__kBitConversionInts[0];\n        const kMantissaHighTopBit = 20;\n        const msdTopBit = 29 - msdLeadingZeros;\n        if (msdTopBit !== (((xBitLength - 1) % 30) | 0)) {\n            throw new Error('implementation bug');\n        }\n        let compareMantissa; // Shifted chunk of mantissa.\n        let remainingMantissaBits = 0;\n        // First, compare most significant digit against beginning of mantissa.\n        if (msdTopBit < kMantissaHighTopBit) {\n            const shift = kMantissaHighTopBit - msdTopBit;\n            remainingMantissaBits = shift + 32;\n            compareMantissa = mantissaHigh >>> shift;\n            mantissaHigh = (mantissaHigh << (32 - shift)) | (mantissaLow >>> shift);\n            mantissaLow = mantissaLow << (32 - shift);\n        }\n        else if (msdTopBit === kMantissaHighTopBit) {\n            remainingMantissaBits = 32;\n            compareMantissa = mantissaHigh;\n            mantissaHigh = mantissaLow;\n            mantissaLow = 0;\n        }\n        else {\n            const shift = msdTopBit - kMantissaHighTopBit;\n            remainingMantissaBits = 32 - shift;\n            compareMantissa =\n                (mantissaHigh << shift) | (mantissaLow >>> (32 - shift));\n            mantissaHigh = mantissaLow << shift;\n            mantissaLow = 0;\n        }\n        xMsd = xMsd >>> 0;\n        compareMantissa = compareMantissa >>> 0;\n        if (xMsd > compareMantissa)\n            return JSBI.__absoluteGreater(xSign);\n        if (xMsd < compareMantissa)\n            return JSBI.__absoluteLess(xSign);\n        // Then, compare additional digits against remaining mantissa bits.\n        for (let digitIndex = xLength - 2; digitIndex >= 0; digitIndex--) {\n            if (remainingMantissaBits > 0) {\n                remainingMantissaBits -= 30;\n                compareMantissa = mantissaHigh >>> 2;\n                mantissaHigh = (mantissaHigh << 30) | (mantissaLow >>> 2);\n                mantissaLow = (mantissaLow << 30);\n            }\n            else {\n                compareMantissa = 0;\n            }\n            const digit = x.__unsignedDigit(digitIndex);\n            if (digit > compareMantissa)\n                return JSBI.__absoluteGreater(xSign);\n            if (digit < compareMantissa)\n                return JSBI.__absoluteLess(xSign);\n        }\n        // Integer parts are equal; check whether {y} has a fractional part.\n        if (mantissaHigh !== 0 || mantissaLow !== 0) {\n            if (remainingMantissaBits === 0)\n                throw new Error('implementation bug');\n            return JSBI.__absoluteLess(xSign);\n        }\n        return 0;\n    }\n    static __equalToNumber(x, y) {\n        if (JSBI.__isOneDigitInt(y)) {\n            if (y === 0)\n                return x.length === 0;\n            // Any multi-digit BigInt is bigger than an int32.\n            return (x.length === 1) && (x.sign === (y < 0)) &&\n                (x.__unsignedDigit(0) === Math.abs(y));\n        }\n        return JSBI.__compareToDouble(x, y) === 0;\n    }\n    // Comparison operations, chosen such that \"op ^ 2\" reverses direction:\n    // 0 - lessThan\n    // 1 - lessThanOrEqual\n    // 2 - greaterThan\n    // 3 - greaterThanOrEqual\n    static __comparisonResultToBool(result, op) {\n        switch (op) {\n            case 0: return result < 0;\n            case 1: return result <= 0;\n            case 2: return result > 0;\n            case 3: return result >= 0;\n        }\n    }\n    static __compare(x, y, op) {\n        x = JSBI.__toPrimitive(x);\n        y = JSBI.__toPrimitive(y);\n        if (typeof x === 'string' && typeof y === 'string') {\n            switch (op) {\n                case 0: return x < y;\n                case 1: return x <= y;\n                case 2: return x > y;\n                case 3: return x >= y;\n            }\n        }\n        if (JSBI.__isBigInt(x) && typeof y === 'string') {\n            y = JSBI.__fromString(y);\n            if (y === null)\n                return false;\n            return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(x, y), op);\n        }\n        if (typeof x === 'string' && JSBI.__isBigInt(y)) {\n            x = JSBI.__fromString(x);\n            if (x === null)\n                return false;\n            return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(x, y), op);\n        }\n        x = JSBI.__toNumeric(x);\n        y = JSBI.__toNumeric(y);\n        if (JSBI.__isBigInt(x)) {\n            if (JSBI.__isBigInt(y)) {\n                return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(x, y), op);\n            }\n            if (typeof y !== 'number')\n                throw new Error('implementation bug');\n            return JSBI.__comparisonResultToBool(JSBI.__compareToNumber(x, y), op);\n        }\n        if (typeof x !== 'number')\n            throw new Error('implementation bug');\n        if (JSBI.__isBigInt(y)) {\n            // Note that \"op ^ 2\" reverses the op's direction.\n            return JSBI.__comparisonResultToBool(JSBI.__compareToNumber(y, x), (op ^ 2));\n        }\n        if (typeof y !== 'number')\n            throw new Error('implementation bug');\n        switch (op) {\n            case 0: return x < y;\n            case 1: return x <= y;\n            case 2: return x > y;\n            case 3: return x >= y;\n        }\n    }\n    __clzmsd() {\n        return JSBI.__clz30(this.__digit(this.length - 1));\n    }\n    static __absoluteAdd(x, y, resultSign) {\n        if (x.length < y.length)\n            return JSBI.__absoluteAdd(y, x, resultSign);\n        if (x.length === 0)\n            return x;\n        if (y.length === 0)\n            return x.sign === resultSign ? x : JSBI.unaryMinus(x);\n        let resultLength = x.length;\n        if (x.__clzmsd() === 0 || (y.length === x.length && y.__clzmsd() === 0)) {\n            resultLength++;\n        }\n        const result = new JSBI(resultLength, resultSign);\n        let carry = 0;\n        let i = 0;\n        for (; i < y.length; i++) {\n            const r = x.__digit(i) + y.__digit(i) + carry;\n            carry = r >>> 30;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        for (; i < x.length; i++) {\n            const r = x.__digit(i) + carry;\n            carry = r >>> 30;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        if (i < result.length) {\n            result.__setDigit(i, carry);\n        }\n        return result.__trim();\n    }\n    static __absoluteSub(x, y, resultSign) {\n        if (x.length === 0)\n            return x;\n        if (y.length === 0)\n            return x.sign === resultSign ? x : JSBI.unaryMinus(x);\n        const result = new JSBI(x.length, resultSign);\n        let borrow = 0;\n        let i = 0;\n        for (; i < y.length; i++) {\n            const r = x.__digit(i) - y.__digit(i) - borrow;\n            borrow = (r >>> 30) & 1;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        for (; i < x.length; i++) {\n            const r = x.__digit(i) - borrow;\n            borrow = (r >>> 30) & 1;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        return result.__trim();\n    }\n    static __absoluteAddOne(x, sign, result = null) {\n        const inputLength = x.length;\n        if (result === null) {\n            result = new JSBI(inputLength, sign);\n        }\n        else {\n            result.sign = sign;\n        }\n        let carry = 1;\n        for (let i = 0; i < inputLength; i++) {\n            const r = x.__digit(i) + carry;\n            carry = r >>> 30;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        if (carry !== 0) {\n            result.__setDigitGrow(inputLength, 1);\n        }\n        return result;\n    }\n    static __absoluteSubOne(x, resultLength) {\n        const length = x.length;\n        resultLength = resultLength || length;\n        const result = new JSBI(resultLength, false);\n        let borrow = 1;\n        for (let i = 0; i < length; i++) {\n            const r = x.__digit(i) - borrow;\n            borrow = (r >>> 30) & 1;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        if (borrow !== 0)\n            throw new Error('implementation bug');\n        for (let i = length; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteAnd(x, y, result = null) {\n        let xLength = x.length;\n        let yLength = y.length;\n        let numPairs = yLength;\n        if (xLength < yLength) {\n            numPairs = xLength;\n            const tmp = x;\n            const tmpLength = xLength;\n            x = y;\n            xLength = yLength;\n            y = tmp;\n            yLength = tmpLength;\n        }\n        let resultLength = numPairs;\n        if (result === null) {\n            result = new JSBI(resultLength, false);\n        }\n        else {\n            resultLength = result.length;\n        }\n        let i = 0;\n        for (; i < numPairs; i++) {\n            result.__setDigit(i, x.__digit(i) & y.__digit(i));\n        }\n        for (; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteAndNot(x, y, result = null) {\n        const xLength = x.length;\n        const yLength = y.length;\n        let numPairs = yLength;\n        if (xLength < yLength) {\n            numPairs = xLength;\n        }\n        let resultLength = xLength;\n        if (result === null) {\n            result = new JSBI(resultLength, false);\n        }\n        else {\n            resultLength = result.length;\n        }\n        let i = 0;\n        for (; i < numPairs; i++) {\n            result.__setDigit(i, x.__digit(i) & ~y.__digit(i));\n        }\n        for (; i < xLength; i++) {\n            result.__setDigit(i, x.__digit(i));\n        }\n        for (; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteOr(x, y, result = null) {\n        let xLength = x.length;\n        let yLength = y.length;\n        let numPairs = yLength;\n        if (xLength < yLength) {\n            numPairs = xLength;\n            const tmp = x;\n            const tmpLength = xLength;\n            x = y;\n            xLength = yLength;\n            y = tmp;\n            yLength = tmpLength;\n        }\n        let resultLength = xLength;\n        if (result === null) {\n            result = new JSBI(resultLength, false);\n        }\n        else {\n            resultLength = result.length;\n        }\n        let i = 0;\n        for (; i < numPairs; i++) {\n            result.__setDigit(i, x.__digit(i) | y.__digit(i));\n        }\n        for (; i < xLength; i++) {\n            result.__setDigit(i, x.__digit(i));\n        }\n        for (; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteXor(x, y, result = null) {\n        let xLength = x.length;\n        let yLength = y.length;\n        let numPairs = yLength;\n        if (xLength < yLength) {\n            numPairs = xLength;\n            const tmp = x;\n            const tmpLength = xLength;\n            x = y;\n            xLength = yLength;\n            y = tmp;\n            yLength = tmpLength;\n        }\n        let resultLength = xLength;\n        if (result === null) {\n            result = new JSBI(resultLength, false);\n        }\n        else {\n            resultLength = result.length;\n        }\n        let i = 0;\n        for (; i < numPairs; i++) {\n            result.__setDigit(i, x.__digit(i) ^ y.__digit(i));\n        }\n        for (; i < xLength; i++) {\n            result.__setDigit(i, x.__digit(i));\n        }\n        for (; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteCompare(x, y) {\n        const diff = x.length - y.length;\n        if (diff !== 0)\n            return diff;\n        let i = x.length - 1;\n        while (i >= 0 && x.__digit(i) === y.__digit(i))\n            i--;\n        if (i < 0)\n            return 0;\n        return x.__unsignedDigit(i) > y.__unsignedDigit(i) ? 1 : -1;\n    }\n    static __multiplyAccumulate(multiplicand, multiplier, accumulator, accumulatorIndex) {\n        if (multiplier === 0)\n            return;\n        const m2Low = multiplier & 0x7FFF;\n        const m2High = multiplier >>> 15;\n        let carry = 0;\n        let high = 0;\n        for (let i = 0; i < multiplicand.length; i++, accumulatorIndex++) {\n            let acc = accumulator.__digit(accumulatorIndex);\n            const m1 = multiplicand.__digit(i);\n            const m1Low = m1 & 0x7FFF;\n            const m1High = m1 >>> 15;\n            const rLow = JSBI.__imul(m1Low, m2Low);\n            const rMid1 = JSBI.__imul(m1Low, m2High);\n            const rMid2 = JSBI.__imul(m1High, m2Low);\n            const rHigh = JSBI.__imul(m1High, m2High);\n            acc += high + rLow + carry;\n            carry = acc >>> 30;\n            acc &= 0x3FFFFFFF;\n            acc += ((rMid1 & 0x7FFF) << 15) + ((rMid2 & 0x7FFF) << 15);\n            carry += acc >>> 30;\n            high = rHigh + (rMid1 >>> 15) + (rMid2 >>> 15);\n            accumulator.__setDigit(accumulatorIndex, acc & 0x3FFFFFFF);\n        }\n        for (; carry !== 0 || high !== 0; accumulatorIndex++) {\n            let acc = accumulator.__digit(accumulatorIndex);\n            acc += carry + high;\n            high = 0;\n            carry = acc >>> 30;\n            accumulator.__setDigit(accumulatorIndex, acc & 0x3FFFFFFF);\n        }\n    }\n    static __internalMultiplyAdd(source, factor, summand, n, result) {\n        let carry = summand;\n        let high = 0;\n        for (let i = 0; i < n; i++) {\n            const digit = source.__digit(i);\n            const rx = JSBI.__imul(digit & 0x7FFF, factor);\n            const ry = JSBI.__imul(digit >>> 15, factor);\n            const r = rx + ((ry & 0x7FFF) << 15) + high + carry;\n            carry = r >>> 30;\n            high = ry >>> 15;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        if (result.length > n) {\n            result.__setDigit(n++, carry + high);\n            while (n < result.length) {\n                result.__setDigit(n++, 0);\n            }\n        }\n        else {\n            if (carry + high !== 0)\n                throw new Error('implementation bug');\n        }\n    }\n    __inplaceMultiplyAdd(multiplier, summand, length) {\n        if (length > this.length)\n            length = this.length;\n        const mLow = multiplier & 0x7FFF;\n        const mHigh = multiplier >>> 15;\n        let carry = 0;\n        let high = summand;\n        for (let i = 0; i < length; i++) {\n            const d = this.__digit(i);\n            const dLow = d & 0x7FFF;\n            const dHigh = d >>> 15;\n            const pLow = JSBI.__imul(dLow, mLow);\n            const pMid1 = JSBI.__imul(dLow, mHigh);\n            const pMid2 = JSBI.__imul(dHigh, mLow);\n            const pHigh = JSBI.__imul(dHigh, mHigh);\n            let result = high + pLow + carry;\n            carry = result >>> 30;\n            result &= 0x3FFFFFFF;\n            result += ((pMid1 & 0x7FFF) << 15) + ((pMid2 & 0x7FFF) << 15);\n            carry += result >>> 30;\n            high = pHigh + (pMid1 >>> 15) + (pMid2 >>> 15);\n            this.__setDigit(i, result & 0x3FFFFFFF);\n        }\n        if (carry !== 0 || high !== 0) {\n            throw new Error('implementation bug');\n        }\n    }\n    static __absoluteDivSmall(x, divisor, quotient = null) {\n        if (quotient === null)\n            quotient = new JSBI(x.length, false);\n        let remainder = 0;\n        for (let i = x.length * 2 - 1; i >= 0; i -= 2) {\n            let input = ((remainder << 15) | x.__halfDigit(i)) >>> 0;\n            const upperHalf = (input / divisor) | 0;\n            remainder = (input % divisor) | 0;\n            input = ((remainder << 15) | x.__halfDigit(i - 1)) >>> 0;\n            const lowerHalf = (input / divisor) | 0;\n            remainder = (input % divisor) | 0;\n            quotient.__setDigit(i >>> 1, (upperHalf << 15) | lowerHalf);\n        }\n        return quotient;\n    }\n    static __absoluteModSmall(x, divisor) {\n        let remainder = 0;\n        for (let i = x.length * 2 - 1; i >= 0; i--) {\n            const input = ((remainder << 15) | x.__halfDigit(i)) >>> 0;\n            remainder = (input % divisor) | 0;\n        }\n        return remainder;\n    }\n    static __absoluteDivLarge(dividend, divisor, wantQuotient, wantRemainder) {\n        const n = divisor.__halfDigitLength();\n        const n2 = divisor.length;\n        const m = dividend.__halfDigitLength() - n;\n        let q = null;\n        if (wantQuotient) {\n            q = new JSBI((m + 2) >>> 1, false);\n            q.__initializeDigits();\n        }\n        const qhatv = new JSBI((n + 2) >>> 1, false);\n        qhatv.__initializeDigits();\n        // D1.\n        const shift = JSBI.__clz15(divisor.__halfDigit(n - 1));\n        if (shift > 0) {\n            divisor = JSBI.__specialLeftShift(divisor, shift, 0 /* add no digits*/);\n        }\n        const u = JSBI.__specialLeftShift(dividend, shift, 1 /* add one digit */);\n        // D2.\n        const vn1 = divisor.__halfDigit(n - 1);\n        let halfDigitBuffer = 0;\n        for (let j = m; j >= 0; j--) {\n            // D3.\n            let qhat = 0x7FFF;\n            const ujn = u.__halfDigit(j + n);\n            if (ujn !== vn1) {\n                const input = ((ujn << 15) | u.__halfDigit(j + n - 1)) >>> 0;\n                qhat = (input / vn1) | 0;\n                let rhat = (input % vn1) | 0;\n                const vn2 = divisor.__halfDigit(n - 2);\n                const ujn2 = u.__halfDigit(j + n - 2);\n                while ((JSBI.__imul(qhat, vn2) >>> 0) > (((rhat << 16) | ujn2) >>> 0)) {\n                    qhat--;\n                    rhat += vn1;\n                    if (rhat > 0x7FFF)\n                        break;\n                }\n            }\n            // D4.\n            JSBI.__internalMultiplyAdd(divisor, qhat, 0, n2, qhatv);\n            let c = u.__inplaceSub(qhatv, j, n + 1);\n            if (c !== 0) {\n                c = u.__inplaceAdd(divisor, j, n);\n                u.__setHalfDigit(j + n, (u.__halfDigit(j + n) + c) & 0x7FFF);\n                qhat--;\n            }\n            if (wantQuotient) {\n                if (j & 1) {\n                    halfDigitBuffer = qhat << 15;\n                }\n                else {\n                    // TODO make this statically determinable\n                    q.__setDigit(j >>> 1, halfDigitBuffer | qhat);\n                }\n            }\n        }\n        if (wantRemainder) {\n            u.__inplaceRightShift(shift);\n            if (wantQuotient) {\n                return { quotient: q, remainder: u };\n            }\n            return u;\n        }\n        if (wantQuotient)\n            return q;\n        // TODO find a way to make this statically unreachable?\n        throw new Error('unreachable');\n    }\n    static __clz15(value) {\n        return JSBI.__clz30(value) - 15;\n    }\n    // TODO: work on full digits, like __inplaceSub?\n    __inplaceAdd(summand, startIndex, halfDigits) {\n        let carry = 0;\n        for (let i = 0; i < halfDigits; i++) {\n            const sum = this.__halfDigit(startIndex + i) +\n                summand.__halfDigit(i) +\n                carry;\n            carry = sum >>> 15;\n            this.__setHalfDigit(startIndex + i, sum & 0x7FFF);\n        }\n        return carry;\n    }\n    __inplaceSub(subtrahend, startIndex, halfDigits) {\n        const fullSteps = (halfDigits - 1) >>> 1;\n        let borrow = 0;\n        if (startIndex & 1) {\n            // this:   [..][..][..]\n            // subtr.:   [..][..]\n            startIndex >>= 1;\n            let current = this.__digit(startIndex);\n            let r0 = current & 0x7FFF;\n            let i = 0;\n            for (; i < fullSteps; i++) {\n                const sub = subtrahend.__digit(i);\n                const r15 = (current >>> 15) - (sub & 0x7FFF) - borrow;\n                borrow = (r15 >>> 15) & 1;\n                this.__setDigit(startIndex + i, ((r15 & 0x7FFF) << 15) | (r0 & 0x7FFF));\n                current = this.__digit(startIndex + i + 1);\n                r0 = (current & 0x7FFF) - (sub >>> 15) - borrow;\n                borrow = (r0 >>> 15) & 1;\n            }\n            // Unrolling the last iteration gives a 5% performance benefit!\n            const sub = subtrahend.__digit(i);\n            const r15 = (current >>> 15) - (sub & 0x7FFF) - borrow;\n            borrow = (r15 >>> 15) & 1;\n            this.__setDigit(startIndex + i, ((r15 & 0x7FFF) << 15) | (r0 & 0x7FFF));\n            const subTop = sub >>> 15;\n            if (startIndex + i + 1 >= this.length) {\n                throw new RangeError('out of bounds');\n            }\n            if ((halfDigits & 1) === 0) {\n                current = this.__digit(startIndex + i + 1);\n                r0 = (current & 0x7FFF) - subTop - borrow;\n                borrow = (r0 >>> 15) & 1;\n                this.__setDigit(startIndex + subtrahend.length, (current & 0x3FFF8000) | (r0 & 0x7FFF));\n            }\n        }\n        else {\n            startIndex >>= 1;\n            let i = 0;\n            for (; i < subtrahend.length - 1; i++) {\n                const current = this.__digit(startIndex + i);\n                const sub = subtrahend.__digit(i);\n                const r0 = (current & 0x7FFF) - (sub & 0x7FFF) - borrow;\n                borrow = (r0 >>> 15) & 1;\n                const r15 = (current >>> 15) - (sub >>> 15) - borrow;\n                borrow = (r15 >>> 15) & 1;\n                this.__setDigit(startIndex + i, ((r15 & 0x7FFF) << 15) | (r0 & 0x7FFF));\n            }\n            const current = this.__digit(startIndex + i);\n            const sub = subtrahend.__digit(i);\n            const r0 = (current & 0x7FFF) - (sub & 0x7FFF) - borrow;\n            borrow = (r0 >>> 15) & 1;\n            let r15 = 0;\n            if ((halfDigits & 1) === 0) {\n                r15 = (current >>> 15) - (sub >>> 15) - borrow;\n                borrow = (r15 >>> 15) & 1;\n            }\n            this.__setDigit(startIndex + i, ((r15 & 0x7FFF) << 15) | (r0 & 0x7FFF));\n        }\n        return borrow;\n    }\n    __inplaceRightShift(shift) {\n        if (shift === 0)\n            return;\n        let carry = this.__digit(0) >>> shift;\n        const last = this.length - 1;\n        for (let i = 0; i < last; i++) {\n            const d = this.__digit(i + 1);\n            this.__setDigit(i, ((d << (30 - shift)) & 0x3FFFFFFF) | carry);\n            carry = d >>> shift;\n        }\n        this.__setDigit(last, carry);\n    }\n    static __specialLeftShift(x, shift, addDigit) {\n        const n = x.length;\n        const resultLength = n + addDigit;\n        const result = new JSBI(resultLength, false);\n        if (shift === 0) {\n            for (let i = 0; i < n; i++)\n                result.__setDigit(i, x.__digit(i));\n            if (addDigit > 0)\n                result.__setDigit(n, 0);\n            return result;\n        }\n        let carry = 0;\n        for (let i = 0; i < n; i++) {\n            const d = x.__digit(i);\n            result.__setDigit(i, ((d << shift) & 0x3FFFFFFF) | carry);\n            carry = d >>> (30 - shift);\n        }\n        if (addDigit > 0) {\n            result.__setDigit(n, carry);\n        }\n        return result;\n    }\n    static __leftShiftByAbsolute(x, y) {\n        const shift = JSBI.__toShiftAmount(y);\n        if (shift < 0)\n            throw new RangeError('BigInt too big');\n        const digitShift = (shift / 30) | 0;\n        const bitsShift = shift % 30;\n        const length = x.length;\n        const grow = bitsShift !== 0 &&\n            (x.__digit(length - 1) >>> (30 - bitsShift)) !== 0;\n        const resultLength = length + digitShift + (grow ? 1 : 0);\n        const result = new JSBI(resultLength, x.sign);\n        if (bitsShift === 0) {\n            let i = 0;\n            for (; i < digitShift; i++)\n                result.__setDigit(i, 0);\n            for (; i < resultLength; i++) {\n                result.__setDigit(i, x.__digit(i - digitShift));\n            }\n        }\n        else {\n            let carry = 0;\n            for (let i = 0; i < digitShift; i++)\n                result.__setDigit(i, 0);\n            for (let i = 0; i < length; i++) {\n                const d = x.__digit(i);\n                result.__setDigit(i + digitShift, ((d << bitsShift) & 0x3FFFFFFF) | carry);\n                carry = d >>> (30 - bitsShift);\n            }\n            if (grow) {\n                result.__setDigit(length + digitShift, carry);\n            }\n            else {\n                if (carry !== 0)\n                    throw new Error('implementation bug');\n            }\n        }\n        return result.__trim();\n    }\n    static __rightShiftByAbsolute(x, y) {\n        const length = x.length;\n        const sign = x.sign;\n        const shift = JSBI.__toShiftAmount(y);\n        if (shift < 0)\n            return JSBI.__rightShiftByMaximum(sign);\n        const digitShift = (shift / 30) | 0;\n        const bitsShift = shift % 30;\n        let resultLength = length - digitShift;\n        if (resultLength <= 0)\n            return JSBI.__rightShiftByMaximum(sign);\n        // For negative numbers, round down if any bit was shifted out (so that\n        // e.g. -5n >> 1n == -3n and not -2n). Check now whether this will happen\n        // and whether itc an cause overflow into a new digit. If we allocate the\n        // result large enough up front, it avoids having to do grow it later.\n        let mustRoundDown = false;\n        if (sign) {\n            const mask = (1 << bitsShift) - 1;\n            if ((x.__digit(digitShift) & mask) !== 0) {\n                mustRoundDown = true;\n            }\n            else {\n                for (let i = 0; i < digitShift; i++) {\n                    if (x.__digit(i) !== 0) {\n                        mustRoundDown = true;\n                        break;\n                    }\n                }\n            }\n        }\n        // If bitsShift is non-zero, it frees up bits, preventing overflow.\n        if (mustRoundDown && bitsShift === 0) {\n            // Overflow cannot happen if the most significant digit has unset bits.\n            const msd = x.__digit(length - 1);\n            const roundingCanOverflow = ~msd === 0;\n            if (roundingCanOverflow)\n                resultLength++;\n        }\n        let result = new JSBI(resultLength, sign);\n        if (bitsShift === 0) {\n            // Zero out any overflow digit (see \"roundingCanOverflow\" above).\n            result.__setDigit(resultLength - 1, 0);\n            for (let i = digitShift; i < length; i++) {\n                result.__setDigit(i - digitShift, x.__digit(i));\n            }\n        }\n        else {\n            let carry = x.__digit(digitShift) >>> bitsShift;\n            const last = length - digitShift - 1;\n            for (let i = 0; i < last; i++) {\n                const d = x.__digit(i + digitShift + 1);\n                result.__setDigit(i, ((d << (30 - bitsShift)) & 0x3FFFFFFF) | carry);\n                carry = d >>> bitsShift;\n            }\n            result.__setDigit(last, carry);\n        }\n        if (mustRoundDown) {\n            // Since the result is negative, rounding down means adding one to its\n            // absolute value. This cannot overflow.\n            result = JSBI.__absoluteAddOne(result, true, result);\n        }\n        return result.__trim();\n    }\n    static __rightShiftByMaximum(sign) {\n        if (sign) {\n            return JSBI.__oneDigit(1, true);\n        }\n        return JSBI.__zero();\n    }\n    static __toShiftAmount(x) {\n        if (x.length > 1)\n            return -1;\n        const value = x.__unsignedDigit(0);\n        if (value > JSBI.__kMaxLengthBits)\n            return -1;\n        return value;\n    }\n    static __toPrimitive(obj, hint = 'default') {\n        if (typeof obj !== 'object')\n            return obj;\n        if (obj.constructor === JSBI)\n            return obj;\n        if (typeof Symbol !== 'undefined' &&\n            typeof Symbol.toPrimitive === 'symbol') {\n            const exoticToPrim = obj[Symbol.toPrimitive];\n            if (exoticToPrim) {\n                const primitive = exoticToPrim(hint);\n                if (typeof primitive !== 'object')\n                    return primitive;\n                throw new TypeError('Cannot convert object to primitive value');\n            }\n        }\n        const valueOf = obj.valueOf;\n        if (valueOf) {\n            const primitive = valueOf.call(obj);\n            if (typeof primitive !== 'object')\n                return primitive;\n        }\n        const toString = obj.toString;\n        if (toString) {\n            const primitive = toString.call(obj);\n            if (typeof primitive !== 'object')\n                return primitive;\n        }\n        throw new TypeError('Cannot convert object to primitive value');\n    }\n    static __toNumeric(value) {\n        if (JSBI.__isBigInt(value))\n            return value;\n        return +value;\n    }\n    static __isBigInt(value) {\n        return typeof value === 'object' && value !== null &&\n            value.constructor === JSBI;\n    }\n    static __truncateToNBits(n, x) {\n        const neededDigits = ((n + 29) / 30) | 0;\n        const result = new JSBI(neededDigits, x.sign);\n        const last = neededDigits - 1;\n        for (let i = 0; i < last; i++) {\n            result.__setDigit(i, x.__digit(i));\n        }\n        let msd = x.__digit(last);\n        if ((n % 30) !== 0) {\n            const drop = 32 - (n % 30);\n            msd = (msd << drop) >>> drop;\n        }\n        result.__setDigit(last, msd);\n        return result.__trim();\n    }\n    static __truncateAndSubFromPowerOfTwo(n, x, resultSign) {\n        const neededDigits = ((n + 29) / 30) | 0;\n        const result = new JSBI(neededDigits, resultSign);\n        let i = 0;\n        const last = neededDigits - 1;\n        let borrow = 0;\n        const limit = Math.min(last, x.length);\n        for (; i < limit; i++) {\n            const r = 0 - x.__digit(i) - borrow;\n            borrow = (r >>> 30) & 1;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        for (; i < last; i++) {\n            result.__setDigit(i, (-borrow & 0x3FFFFFFF) | 0);\n        }\n        let msd = last < x.length ? x.__digit(last) : 0;\n        const msdBitsConsumed = n % 30;\n        let resultMsd;\n        if (msdBitsConsumed === 0) {\n            resultMsd = 0 - msd - borrow;\n            resultMsd &= 0x3FFFFFFF;\n        }\n        else {\n            const drop = 32 - msdBitsConsumed;\n            msd = (msd << drop) >>> drop;\n            const minuendMsd = 1 << (32 - drop);\n            resultMsd = minuendMsd - msd - borrow;\n            resultMsd &= (minuendMsd - 1);\n        }\n        result.__setDigit(last, resultMsd);\n        return result.__trim();\n    }\n    // Digit helpers.\n    __digit(i) {\n        return this[i];\n    }\n    __unsignedDigit(i) {\n        return this[i] >>> 0;\n    }\n    __setDigit(i, digit) {\n        this[i] = digit | 0;\n    }\n    __setDigitGrow(i, digit) {\n        this[i] = digit | 0;\n    }\n    __halfDigitLength() {\n        const len = this.length;\n        if (this.__unsignedDigit(len - 1) <= 0x7FFF)\n            return len * 2 - 1;\n        return len * 2;\n    }\n    __halfDigit(i) {\n        return (this[i >>> 1] >>> ((i & 1) * 15)) & 0x7FFF;\n    }\n    __setHalfDigit(i, value) {\n        const digitIndex = i >>> 1;\n        const previous = this.__digit(digitIndex);\n        const updated = (i & 1) ? (previous & 0x7FFF) | (value << 15)\n            : (previous & 0x3FFF8000) | (value & 0x7FFF);\n        this.__setDigit(digitIndex, updated);\n    }\n    static __digitPow(base, exponent) {\n        let result = 1;\n        while (exponent > 0) {\n            if (exponent & 1)\n                result *= base;\n            exponent >>>= 1;\n            base *= base;\n        }\n        return result;\n    }\n    static __isOneDigitInt(x) {\n        return (x & 0x3FFFFFFF) === x;\n    }\n}\nJSBI.__kMaxLength = 1 << 25;\nJSBI.__kMaxLengthBits = JSBI.__kMaxLength << 5;\n// Lookup table for the maximum number of bits required per character of a\n// base-N string representation of a number. To increase accuracy, the array\n// value is the actual value multiplied by 32. To generate this table:\n//\n// for (let i = 0; i <= 36; i++) {\n//   console.log(Math.ceil(Math.log2(i) * 32) + ',');\n// }\nJSBI.__kMaxBitsPerChar = [\n    0, 0, 32, 51, 64, 75, 83, 90, 96,\n    102, 107, 111, 115, 119, 122, 126, 128,\n    131, 134, 136, 139, 141, 143, 145, 147,\n    149, 151, 153, 154, 156, 158, 159, 160,\n    162, 163, 165, 166, // 33..36\n];\nJSBI.__kBitsPerCharTableShift = 5;\nJSBI.__kBitsPerCharTableMultiplier = 1 << JSBI.__kBitsPerCharTableShift;\nJSBI.__kConversionChars = '0123456789abcdefghijklmnopqrstuvwxyz'.split('');\nJSBI.__kBitConversionBuffer = new ArrayBuffer(8);\nJSBI.__kBitConversionDouble = new Float64Array(JSBI.__kBitConversionBuffer);\nJSBI.__kBitConversionInts = new Int32Array(JSBI.__kBitConversionBuffer);\n// For IE11 compatibility.\n// Note that the custom replacements are tailored for JSBI's needs, and as\n// such are not reusable as general-purpose polyfills.\nJSBI.__clz30 = Math.clz32 ? function (x) {\n    return Math.clz32(x) - 2;\n} : function (x) {\n    if (x === 0)\n        return 30;\n    return 29 - (Math.log(x >>> 0) / Math.LN2 | 0) | 0;\n};\nJSBI.__imul = Math.imul || function (a, b) {\n    return (a * b) | 0;\n};\nexport default JSBI;\n//# sourceMappingURL=jsbi.js.map"],"names":["Math","imul","clz32","JSBI","abs","max","floor","length","sign","Object","setPrototypeOf","prototype","__kMaxLength","RangeError","result","digit","push","toString","join","radix","__toStringBasePowerOfTwo","__toStringGeneric","Error","i","newLength","last","pop","__clz30","__digit","multiplier","summand","mLow","mHigh","carry","high","d","dLow","dHigh","pLow","__imul","pMid1","pMid2","pHigh","__setDigit","startIndex","halfDigits","sum","__halfDigit","__setHalfDigit","subtrahend","borrow","current","r0","_sub","_r","sub","r15","_i","_current2","_sub3","_r4","_r5","_current","_sub2","_r2","_r3","shift","len","__unsignedDigit","value","digitIndex","previous","updated","arg","Number","isFinite","__zero","__isOneDigitInt","__oneDigit","__fromDouble","__fromString","SyntaxError","_typeof","constructor","primitive","__toPrimitive","BigInt","TypeError","x","xLength","xMsd","msdLeadingZeros","xBitLength","Infinity","exponent","currentDigit","mantissaHigh","mantissaHighBitsUnset","mantissaLow","mantissaLowBitsUnset","rounding","__decideRounding","signBit","__kBitConversionInts","__kBitConversionDouble","__copy","__absoluteSubOne","__trim","__absoluteAddOne","y","unaryMinus","expValue","__kMaxLengthBits","neededDigits","_result","__initializeDigits","msd","runningSquare","multiply","resultLength","__clzmsd","__multiplyAccumulate","__absoluteCompare","quotient","resultSign","divisor","__absoluteDivSmall","__absoluteDivLarge","remainderDigit","__absoluteModSmall","remainder","__absoluteAdd","__absoluteSub","__rightShiftByAbsolute","__leftShiftByAbsolute","__compareToBigInt","equal","__absoluteAnd","y1","__absoluteOr","__absoluteAndNot","__absoluteXor","_resultLength","_result2","_result3","n","neededLength","topDigit","compareDigit","__truncateToNBits","__truncateAndSubFromPowerOfTwo","bitsInTopDigit","__toNumeric","__isBigInt","add","__compare","EQ","__equalToNumber","mantissaBitsUnset","topUnconsumedBit","mask","rawExponent","digits","kMantissaHighTopBit","msdTopBit","remainingMantissaBits","_shift","c","string","cursor","charCodeAt","__isWhitespace","chars","bitsPerChar","__kMaxBitsPerChar","roundup","__kBitsPerCharTableMultiplier","bitsMin","__kBitsPerCharTableShift","limDigit","limAlpha","parts","partsBits","done","part","bits","__fillFromParts","_done","charsSoFar","_d","_part","m","digitsSoFar","__inplaceMultiplyAdd","bitsInDigit","partBits","charMask","charsRequired","Array","pos","availableBits","newDigit","_current3","__kConversionChars","consumedBits","isRecursiveCall","bitLength","maxBitsPerChar","minBitsPerChar","secondHalf","secondHalfChars","conqueror","exponentiate","input","divisionResult","_remainder","firstHalf","leftNegative","bothNegative","xSign","__unequalSign","__absoluteGreater","__absoluteLess","ySign","yAbs","xDigit","__compareToDouble","yBitLength","compareMantissa","_shift2","op","__comparisonResultToBool","__compareToNumber","r","_r6","_r7","inputLength","__setDigitGrow","_i2","yLength","numPairs","tmp","tmpLength","diff","multiplicand","accumulator","accumulatorIndex","m2Low","m2High","acc","m1","m1Low","m1High","rLow","rMid1","rMid2","rHigh","_acc","source","factor","rx","ry","upperHalf","lowerHalf","dividend","wantQuotient","wantRemainder","__halfDigitLength","n2","q","qhatv","__clz15","__specialLeftShift","u","vn1","halfDigitBuffer","j","qhat","ujn","rhat","vn2","ujn2","__internalMultiplyAdd","__inplaceSub","__inplaceAdd","__inplaceRightShift","addDigit","_i3","__toShiftAmount","digitShift","bitsShift","grow","_i4","_i5","__rightShiftByMaximum","mustRoundDown","_i6","_i7","obj","hint","Symbol","toPrimitive","exoticToPrim","valueOf","_primitive","call","_primitive2","drop","min","limit","resultMsd","msdBitsConsumed","minuendMsd","base","__kBitConversionBuffer","ArrayBuffer","Float64Array","Int32Array","LN2","log","a","b"],"mappings":"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"}