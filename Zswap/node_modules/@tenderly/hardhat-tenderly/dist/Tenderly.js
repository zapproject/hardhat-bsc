"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tenderly = void 0;
const fs = __importStar(require("fs-extra"));
const path_1 = require("path");
const index_1 = require("./index");
const TenderlyService_1 = require("./tenderly/TenderlyService");
const util_1 = require("./util");
class Tenderly {
    constructor(bre) {
        this.env = bre;
    }
    async verify(...contracts) {
        const flatContracts = contracts.reduce((accumulator, value) => accumulator.concat(value), []);
        const requestData = await this.filterContracts(flatContracts);
        if (requestData == null) {
            console.log("Verification failed");
            return;
        }
        try {
            await TenderlyService_1.TenderlyService.verifyContracts(requestData);
        }
        catch (err) {
            console.log(err.message);
        }
    }
    async push(...contracts) {
        const flatContracts = contracts.reduce((accumulator, value) => accumulator.concat(value), []);
        const requestData = await this.filterContracts(flatContracts);
        if (this.env.config.tenderly.project === undefined) {
            console.log(`Error in ${index_1.PluginName}: Please provide the project field in the tenderly object in hardhat.config.js`);
            return;
        }
        if (this.env.config.tenderly.username === undefined) {
            console.log(`Error in ${index_1.PluginName}: Please provide the username field in the tenderly object in hardhat.config.js`);
            return;
        }
        if (requestData == null) {
            console.log("Push failed");
            return;
        }
        try {
            await TenderlyService_1.TenderlyService.pushContracts(requestData, this.env.config.tenderly.project, this.env.config.tenderly.username);
        }
        catch (err) {
            console.log(err.message);
        }
    }
    async persistArtifacts(...contracts) {
        const sourcePaths = await this.env.run("compile:solidity:get-source-paths");
        const sourceNames = await this.env.run("compile:solidity:get-source-names", { sourcePaths });
        const data = await this.env.run("compile:solidity:get-dependency-graph", {
            sourceNames
        });
        let contract;
        const destPath = `deployments${path_1.sep}localhost_5777${path_1.sep}`;
        data._resolvedFiles.forEach((resolvedFile, _) => {
            const sourcePath = resolvedFile.sourceName;
            const name = sourcePath
                .split("/")
                .slice(-1)[0]
                .split(".")[0];
            for (contract of contracts) {
                if (contract.name === name) {
                    const contractDataPath = `${this.env.config.paths.artifacts}${path_1.sep}${sourcePath}${path_1.sep}${name}.json`;
                    const contractData = JSON.parse(fs.readFileSync(contractDataPath).toString());
                    const metadata = {
                        compiler: {
                            version: this.env.config.solidity.compilers[0].version
                        },
                        sources: {
                            [sourcePath]: {
                                content: resolvedFile.content.rawContent
                            }
                        }
                    };
                    const visited = {};
                    util_1.resolveDependencies(data, sourcePath, metadata, visited);
                    const artifact = {
                        metadata: JSON.stringify(metadata),
                        address: contract.address,
                        bytecode: contractData.bytecode,
                        deployedBytecode: contractData.deployedBytecode,
                        abi: contractData.abi
                    };
                    fs.outputFileSync(`${destPath}${name}.json`, JSON.stringify(artifact));
                }
            }
        });
    }
    async filterContracts(flatContracts) {
        let contract;
        const requestData = await this.getContractData(flatContracts);
        for (contract of flatContracts) {
            const network = this.env.hardhatArguments.network !== "hardhat"
                ? this.env.hardhatArguments.network || contract.network
                : contract.network;
            if (network === undefined) {
                console.log(`Error in ${index_1.PluginName}: Please provide a network via the hardhat --network argument or directly in the contract`);
                return null;
            }
            const index = requestData.contracts.findIndex(requestContract => requestContract.contractName === contract.name);
            if (index === -1) {
                continue;
            }
            let chainID = index_1.NetworkMap[network.toLowerCase()];
            if (this.env.config.networks[network].chainId !== undefined) {
                chainID = this.env.config.networks[network].chainId.toString();
            }
            if (chainID === undefined) {
                console.log(`Error in ${index_1.PluginName}: Couldn't identify network. Please provide a chainID in the network config object`);
                return null;
            }
            requestData.contracts[index].networks = {
                [chainID]: {
                    address: contract.address
                }
            };
        }
        return requestData;
    }
    async getContracts(flatContracts) {
        var _a;
        const sourcePaths = await this.env.run("compile:solidity:get-source-paths");
        const sourceNames = await this.env.run("compile:solidity:get-source-names", { sourcePaths });
        const data = await this.env.run("compile:solidity:get-dependency-graph", {
            sourceNames
        });
        let contract;
        const requestContracts = [];
        const metadata = {
            compiler: {
                version: this.env.config.solidity.compilers[0].version
            },
            sources: {}
        };
        data._resolvedFiles.forEach((resolvedFile, _) => {
            const sourcePath = resolvedFile.sourceName;
            const name = sourcePath
                .split("/")
                .slice(-1)[0]
                .split(".")[0];
            for (contract of flatContracts) {
                if (contract.name !== name) {
                    continue;
                }
                metadata.sources[sourcePath] = {
                    content: resolvedFile.content.rawContent
                };
                const visited = {};
                util_1.resolveDependencies(data, sourcePath, metadata, visited);
            }
        });
        for (const [key, value] of Object.entries(metadata.sources)) {
            const name = key
                .split("/")
                .slice(-1)[0]
                .split(".")[0];
            const contractToPush = {
                contractName: name,
                source: value.content,
                sourcePath: key,
                networks: {},
                compiler: {
                    name: "solc",
                    version: (_a = this.env.config.solidity) === null || _a === void 0 ? void 0 : _a.compilers[0].version
                }
            };
            requestContracts.push(contractToPush);
        }
        return requestContracts;
    }
    async getContractData(flatContracts) {
        const config = this.env.config;
        const contracts = await this.getContracts(flatContracts);
        const solcConfig = {
            compiler_version: config.solidity.compilers[0].version,
            optimizations_used: config.solidity.compilers[0].settings.optimizer.enabled,
            optimizations_count: config.solidity.compilers[0].settings.optimizer.runs
        };
        return {
            contracts,
            config: solcConfig
        };
    }
}
exports.Tenderly = Tenderly;
//# sourceMappingURL=Tenderly.js.map