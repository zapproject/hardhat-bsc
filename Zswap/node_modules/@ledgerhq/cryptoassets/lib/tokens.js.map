{"version":3,"sources":["../src/tokens.js"],"names":["emptyArray","tokensArray","tokensArrayWithDelisted","tokensByCryptoCurrency","tokensByCryptoCurrencyWithDelisted","tokensById","tokensByTicker","tokensByAddress","addTokens","erc20tokens","map","convertERC20","trc10tokens","convertTRONTokens","trc20tokens","asatokens","convertAlgorandASATokens","defaultTokenListOptions","withDelisted","listTokens","options","listTokensForCryptoCurrency","currency","id","listTokenTypesForCryptoCurrency","reduce","acc","cur","tokenType","indexOf","findTokenByTicker","ticker","findTokenById","findTokenByAddress","address","toLowerCase","hasTokenId","getTokenById","Error","findCompoundToken","token","parentCurrency","find","t","compoundFor","comparePriority","a","b","Number","disableCountervalue","list","forEach","delisted","push","contractAddress","parentCurrencyId","magnitude","name","ledgerSignature","countervalueTicker","type","isTestnetFor","undefined","units","code","abbr","precision","enableCountervalues"],"mappings":"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","sourcesContent":["// @flow\nimport type { TokenCurrency, CryptoCurrency } from \"./types\";\nimport { getCryptoCurrencyById } from \"./currencies\";\n\nimport erc20tokens from \"../data/erc20\";\nimport trc10tokens from \"../data/trc10\";\nimport trc20tokens from \"../data/trc20\";\nimport asatokens from \"../data/asa\";\n\nconst emptyArray = [];\nconst tokensArray: TokenCurrency[] = [];\nconst tokensArrayWithDelisted: TokenCurrency[] = [];\nconst tokensByCryptoCurrency: { [_: string]: TokenCurrency[] } = {};\nconst tokensByCryptoCurrencyWithDelisted: { [_: string]: TokenCurrency[] } = {};\nconst tokensById: { [_: string]: TokenCurrency } = {};\nconst tokensByTicker: { [_: string]: TokenCurrency } = {};\nconst tokensByAddress: { [_: string]: TokenCurrency } = {};\n\naddTokens(erc20tokens.map(convertERC20));\naddTokens(trc10tokens.map(convertTRONTokens(\"trc10\")));\naddTokens(trc20tokens.map(convertTRONTokens(\"trc20\")));\naddTokens(asatokens.map(convertAlgorandASATokens));\n\ntype TokensListOptions = {\n  withDelisted: boolean,\n};\n\nconst defaultTokenListOptions: TokensListOptions = {\n  withDelisted: false,\n};\n\n/**\n *\n */\nexport function listTokens(\n  options?: $Shape<TokensListOptions>\n): TokenCurrency[] {\n  const { withDelisted } = { ...defaultTokenListOptions, ...options };\n  return withDelisted ? tokensArrayWithDelisted : tokensArray;\n}\n\n/**\n *\n */\nexport function listTokensForCryptoCurrency(\n  currency: CryptoCurrency,\n  options?: $Shape<TokensListOptions>\n): TokenCurrency[] {\n  const { withDelisted } = { ...defaultTokenListOptions, ...options };\n  if (withDelisted) {\n    return tokensByCryptoCurrencyWithDelisted[currency.id] || emptyArray;\n  }\n  return tokensByCryptoCurrency[currency.id] || emptyArray;\n}\n\n/**\n *\n */\nexport function listTokenTypesForCryptoCurrency(\n  currency: CryptoCurrency\n): string[] {\n  return listTokensForCryptoCurrency(currency).reduce((acc, cur) => {\n    const tokenType = cur.tokenType;\n\n    if (acc.indexOf(tokenType) < 0) {\n      return [...acc, tokenType];\n    }\n\n    return acc;\n  }, []);\n}\n\n/**\n *\n */\nexport function findTokenByTicker(ticker: string): ?TokenCurrency {\n  return tokensByTicker[ticker];\n}\n\n/**\n *\n */\nexport function findTokenById(id: string): ?TokenCurrency {\n  return tokensById[id];\n}\n\n/**\n *\n */\nexport function findTokenByAddress(address: string): ?TokenCurrency {\n  return tokensByAddress[address.toLowerCase()];\n}\n\n/**\n *\n */\nexport const hasTokenId = (id: string): boolean => id in tokensById;\n\n/**\n *\n */\nexport function getTokenById(id: string): TokenCurrency {\n  const currency = findTokenById(id);\n  if (!currency) {\n    throw new Error(`token with id \"${id}\" not found`);\n  }\n  return currency;\n}\n\n/**\n * if a given token account is a token that can be used in compound, give the associated compound token (cToken)\n * @param {*} token\n */\nexport function findCompoundToken(token: TokenCurrency): ?TokenCurrency {\n  // TODO can be optimized by generating a direct map\n  return listTokensForCryptoCurrency(token.parentCurrency, {\n    withDelisted: true,\n  }).find((t) => t.compoundFor === token.id);\n}\n\nfunction comparePriority(a: TokenCurrency, b: TokenCurrency) {\n  return Number(!!b.disableCountervalue) - Number(!!a.disableCountervalue);\n}\n\nfunction addTokens(list: TokenCurrency[]) {\n  list.forEach((token) => {\n    if (!token.delisted) tokensArray.push(token);\n    tokensArrayWithDelisted.push(token);\n    tokensById[token.id] = token;\n\n    if (\n      !tokensByTicker[token.ticker] ||\n      comparePriority(token, tokensByTicker[token.ticker]) > 0\n    ) {\n      tokensByTicker[token.ticker] = token;\n    }\n\n    tokensByAddress[token.contractAddress.toLowerCase()] = token;\n    const { parentCurrency } = token;\n    if (!(parentCurrency.id in tokensByCryptoCurrency)) {\n      tokensByCryptoCurrency[parentCurrency.id] = [];\n    }\n    if (!(parentCurrency.id in tokensByCryptoCurrencyWithDelisted)) {\n      tokensByCryptoCurrencyWithDelisted[parentCurrency.id] = [];\n    }\n    if (!token.delisted) tokensByCryptoCurrency[parentCurrency.id].push(token);\n    tokensByCryptoCurrencyWithDelisted[parentCurrency.id].push(token);\n  });\n}\n\nfunction convertERC20([\n  parentCurrencyId,\n  token,\n  ticker,\n  magnitude,\n  name,\n  ledgerSignature,\n  contractAddress,\n  disableCountervalue,\n  delisted,\n  countervalueTicker,\n  compoundFor,\n]): TokenCurrency {\n  const parentCurrency = getCryptoCurrencyById(parentCurrencyId);\n  return {\n    type: \"TokenCurrency\",\n    id: parentCurrencyId + \"/erc20/\" + token,\n    ledgerSignature,\n    contractAddress,\n    parentCurrency,\n    tokenType: \"erc20\",\n    name,\n    ticker,\n    delisted,\n    disableCountervalue: !!parentCurrency.isTestnetFor || !!disableCountervalue,\n    countervalueTicker,\n    compoundFor: compoundFor\n      ? parentCurrencyId + \"/erc20/\" + compoundFor\n      : undefined,\n    units: [\n      {\n        name,\n        code: ticker,\n        magnitude,\n      },\n    ],\n  };\n}\n\nfunction convertAlgorandASATokens([\n  id,\n  abbr,\n  name,\n  contractAddress,\n  precision,\n  enableCountervalues,\n]): TokenCurrency {\n  return {\n    type: \"TokenCurrency\",\n    id: `algorand/asa/${id}`,\n    contractAddress,\n    parentCurrency: getCryptoCurrencyById(\"algorand\"),\n    tokenType: \"asa\",\n    name,\n    ticker: abbr,\n    disableCountervalue: !enableCountervalues,\n    units: [\n      {\n        name,\n        code: abbr,\n        magnitude: precision,\n      },\n    ],\n  };\n}\nfunction convertTRONTokens(type: \"trc10\" | \"trc20\") {\n  return ([\n    id,\n    abbr,\n    name,\n    contractAddress,\n    precision,\n    delisted,\n    ledgerSignature,\n    enableCountervalues,\n  ]): TokenCurrency => ({\n    type: \"TokenCurrency\",\n    id: `tron/${type}/${id}`,\n    contractAddress,\n    parentCurrency: getCryptoCurrencyById(\"tron\"),\n    tokenType: type,\n    name,\n    ticker: abbr,\n    delisted,\n    disableCountervalue: !enableCountervalues,\n    ledgerSignature,\n    units: [\n      {\n        name,\n        code: abbr,\n        magnitude: precision,\n      },\n    ],\n  });\n}\n"],"file":"tokens.js"}