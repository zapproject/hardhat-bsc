/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { ZswapWizardKExploitMock } from "../ZswapWizardKExploitMock";

export class ZswapWizardKExploitMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _zswapWizardK: string,
    overrides?: Overrides
  ): Promise<ZswapWizardKExploitMock> {
    return super.deploy(
      _zswapWizardK,
      overrides || {}
    ) as Promise<ZswapWizardKExploitMock>;
  }
  getDeployTransaction(
    _zswapWizardK: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(_zswapWizardK, overrides || {});
  }
  attach(address: string): ZswapWizardKExploitMock {
    return super.attach(address) as ZswapWizardKExploitMock;
  }
  connect(signer: Signer): ZswapWizardKExploitMock__factory {
    return super.connect(signer) as ZswapWizardKExploitMock__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ZswapWizardKExploitMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ZswapWizardKExploitMock;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_zswapWizardK",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "contract IKashiWithdrawFee",
        name: "kashiPair",
        type: "address",
      },
    ],
    name: "convert",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "zswapWizardK",
    outputs: [
      {
        internalType: "contract ZswapWizardK",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516101d53803806101d58339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b031661016b61006a600039806089528060ad525061016b6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806337cde9a41461003b578063def2489b1461005f575b600080fd5b610043610087565b604080516001600160a01b039092168252519081900360200190f35b6100856004803603602081101561007557600080fd5b50356001600160a01b03166100ab565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663def2489b826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b15801561011a57600080fd5b505af115801561012e573d6000803e3d6000fd5b505050505056fea26469706673582212202b3ce43caff16cb2bfbad13d6baa4fdd8a58045a2224b030f1199e73e1d910e364736f6c634300060c0033";
