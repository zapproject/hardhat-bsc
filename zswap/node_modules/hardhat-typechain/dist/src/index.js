"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const task_names_1 = require("hardhat/builtin-tasks/task-names");
const config_1 = require("hardhat/config");
const plugins_1 = require("hardhat/plugins");
const config_2 = require("./config");
require("./type-extensions");
config_1.extendConfig((config) => {
    config.typechain = config_2.getDefaultTypechainConfig(config);
    const typechainTargets = ["ethers-v5", "web3-v1", "truffle-v5"];
    if (!typechainTargets.includes(config.typechain.target)) {
        throw new plugins_1.HardhatPluginError("Typechain", "Invalid Typechain target, please provide via hardhat.config.js (typechain.target)");
    }
});
config_1.task(task_names_1.TASK_COMPILE, "Compiles the entire project, building all artifacts")
    .addFlag("noTypechain", "Skip Typechain compilation")
    .setAction(async ({ global, noTypechain }, { config }, runSuper) => {
    if (global) {
        return;
    }
    await runSuper();
    if (noTypechain) {
        return;
    }
    // RUN TYPECHAIN TASK
    const typechain = config.typechain;
    console.log(`Creating Typechain artifacts in directory ${typechain.outDir} for target ${typechain.target}`);
    const cwd = process.cwd();
    const { TypeChain } = await Promise.resolve().then(() => __importStar(require("typechain/dist/TypeChain")));
    const { tsGenerator } = await Promise.resolve().then(() => __importStar(require("ts-generator")));
    await tsGenerator({ cwd }, new TypeChain({
        cwd,
        rawConfig: {
            files: `${config.paths.artifacts}/!(build-info)/**/+([a-zA-Z0-9]).json`,
            outDir: typechain.outDir,
            target: typechain.target,
        },
    }));
    console.log(`Successfully generated Typechain artifacts!`);
});
config_1.task("typechain", "Generate Typechain typings for compiled contracts").setAction(async ({}, { run }) => {
    await run(task_names_1.TASK_COMPILE, { quiet: true });
});
config_1.task(task_names_1.TASK_CLEAN, "Clears the cache and deletes all artifacts", async ({ global }, { config }, runSuper) => {
    if (global) {
        return;
    }
    if (await fs_extra_1.default.pathExists(config.typechain.outDir)) {
        await fs_extra_1.default.remove(config.typechain.outDir);
    }
    await runSuper();
});
//# sourceMappingURL=index.js.map