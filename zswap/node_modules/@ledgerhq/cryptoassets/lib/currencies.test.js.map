{"version":3,"sources":["../src/currencies.test.js"],"names":["test","expect","toMatchObject","id","name","toBe","toThrow","bitcoinMatch","c","undefined","all","prod","not","filter","a","isTestnetFor","length","toBeGreaterThan","supported","terminated","units","toEqual","tickers","fiat","ticker","toBeTruthy","toBeFalsy","unit","code","magnitude","token","ledgerSignature","tokenType","parentCurrency","compoundFor","t","map","join","sort","b","tokens","toMatchSnapshot","every","disableCountervalue","coinId","mycoin","type","coinType","managerAppName","countervalueTicker","scheme","color","family","explorerViews","address","tx"],"mappings":"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","sourcesContent":["import {\n  listFiatCurrencies,\n  getFiatCurrencyByTicker,\n  hasFiatCurrencyTicker,\n} from \"./fiats\";\nimport { listTokens, findTokenById } from \"./tokens\";\nimport {\n  listCryptoCurrencies,\n  hasCryptoCurrencyId,\n  getCryptoCurrencyById,\n  findCryptoCurrency,\n  findCryptoCurrencyById,\n  findCryptoCurrencyByScheme,\n  findCryptoCurrencyByTicker,\n  findCryptoCurrencyByKeyword,\n  registerCryptoCurrency,\n} from \"./currencies\";\n\ntest(\"can get currency by coin type\", () => {\n  expect(getCryptoCurrencyById(\"bitcoin\")).toMatchObject({\n    id: \"bitcoin\",\n    name: \"Bitcoin\",\n  });\n  expect(getCryptoCurrencyById(\"litecoin\")).toMatchObject({\n    id: \"litecoin\",\n    name: \"Litecoin\",\n  });\n  expect(hasCryptoCurrencyId(\"bitcoin\")).toBe(true);\n  expect(hasCryptoCurrencyId(\"\")).toBe(false);\n  expect(() => getCryptoCurrencyById(\"\")).toThrow();\n  expect(hasCryptoCurrencyId(\"_\")).toBe(false);\n  expect(() => getCryptoCurrencyById(\"_\")).toThrow();\n});\n\ntest(\"can find currency\", () => {\n  const bitcoinMatch = {\n    id: \"bitcoin\",\n    name: \"Bitcoin\",\n  };\n  expect(findCryptoCurrency((c) => c.name === \"Bitcoin\")).toMatchObject(\n    bitcoinMatch\n  );\n  expect(findCryptoCurrencyById(\"bitcoin\")).toMatchObject(bitcoinMatch);\n  expect(findCryptoCurrencyByKeyword(\"btc\")).toMatchObject(bitcoinMatch);\n  expect(findCryptoCurrencyByKeyword(\"btc\")).toMatchObject(bitcoinMatch);\n  expect(findCryptoCurrencyByKeyword(\"btc\")).toMatchObject(bitcoinMatch);\n  expect(findCryptoCurrencyByTicker(\"BTC\")).toMatchObject(bitcoinMatch);\n  expect(findCryptoCurrencyByScheme(\"bitcoin\")).toMatchObject(bitcoinMatch);\n  expect(findCryptoCurrencyById(\"_\")).toBe(undefined);\n  expect(findCryptoCurrencyByKeyword(\"_\")).toBe(undefined);\n  expect(findCryptoCurrencyByKeyword(\"_\")).toBe(undefined);\n  expect(findCryptoCurrencyByKeyword(\"_\")).toBe(undefined);\n  expect(findCryptoCurrencyByTicker(\"_\")).toBe(undefined);\n  expect(findCryptoCurrencyByScheme(\"_\")).toBe(undefined);\n});\n\ntest(\"there are some dev cryptocurrencies\", () => {\n  const all = listCryptoCurrencies(true);\n  const prod = listCryptoCurrencies();\n  expect(all).not.toBe(prod);\n  expect(all.filter((a) => !a.isTestnetFor)).toMatchObject(prod);\n  expect(all.length).toBeGreaterThan(prod.length);\n});\n\ntest(\"there are some terminated cryptocurrencies\", () => {\n  const all = listCryptoCurrencies(false, true);\n  const supported = listCryptoCurrencies();\n  expect(all).not.toBe(supported);\n  expect(all.filter((a) => !a.terminated)).toMatchObject(supported);\n  expect(all.length).toBeGreaterThan(supported.length);\n});\n\ntest(\"all cryptocurrencies match (by reference) the one you get by id\", () => {\n  for (let c of listCryptoCurrencies()) {\n    expect(c).toBe(getCryptoCurrencyById(c.id));\n  }\n});\n\ntest(\"there is no testnet or terminated coin by default\", () => {\n  expect(listCryptoCurrencies(false, false)).toBe(listCryptoCurrencies());\n  expect(listCryptoCurrencies(true, true).length).toBeGreaterThan(\n    listCryptoCurrencies().length\n  );\n  for (let c of listCryptoCurrencies()) {\n    expect(!c.terminated).toBe(true);\n    expect(!c.isTestnetFor).toBe(true);\n  }\n});\n\ntest(\"all cryptocurrencies have at least one unit\", () => {\n  for (let c of listCryptoCurrencies()) {\n    expect(c.units.length).toBeGreaterThan(0);\n  }\n});\n\ntest(\"fiats list is always the same\", () => {\n  expect(listFiatCurrencies()).toEqual(listFiatCurrencies());\n});\n\ntest(\"fiats list elements are correct\", () => {\n  const tickers = {};\n  for (const fiat of listFiatCurrencies()) {\n    expect(fiat.ticker).toBeTruthy();\n    expect(typeof fiat.ticker).toBe(\"string\");\n    expect(tickers[fiat.ticker]).toBeFalsy();\n    expect(fiat.units.length).toBeGreaterThan(0);\n    const unit = fiat.units[0];\n    expect(unit.code).toBeTruthy();\n    expect(typeof unit.code).toBe(\"string\");\n    expect(unit.name).toBeTruthy();\n    expect(typeof unit.name).toBe(\"string\");\n    expect(unit.magnitude).toBeGreaterThan(-1);\n    expect(typeof unit.magnitude).toBe(\"number\");\n    tickers[fiat.ticker] = unit;\n  }\n});\n\ntest(\"tokens are correct\", () => {\n  expect(listTokens().length).toBeGreaterThan(0);\n  for (const token of listTokens()) {\n    expect(token.ticker).toBeTruthy();\n    expect(typeof token.id).toBe(\"string\");\n    expect(typeof token.name).toBe(\"string\");\n    if (token.ledgerSignature) {\n      expect(typeof token.ledgerSignature).toBe(\"string\");\n    }\n    expect(typeof token.tokenType).toBe(\"string\");\n    expect(typeof token.parentCurrency).toBe(\"object\");\n    expect(hasCryptoCurrencyId(token.parentCurrency.id)).toBe(true);\n    expect(typeof token.ticker).toBe(\"string\");\n    expect(token.units.length).toBeGreaterThan(0);\n    const unit = token.units[0];\n    expect(unit.code).toBeTruthy();\n    expect(typeof unit.code).toBe(\"string\");\n    expect(unit.name).toBeTruthy();\n    expect(typeof unit.name).toBe(\"string\");\n    expect(unit.magnitude).toBeGreaterThan(-1);\n    expect(typeof unit.magnitude).toBe(\"number\");\n    if (token.compoundFor) {\n      const t = findTokenById(token.compoundFor);\n      expect(typeof t).toBe(\"object\");\n    }\n  }\n});\n\ntest(\"fiats list is sorted by ticker\", () => {\n  expect(\n    listFiatCurrencies()\n      .map((fiat) => fiat.ticker)\n      .join(\",\")\n  ).toEqual(\n    listFiatCurrencies()\n      .map((fiat) => fiat.ticker)\n      .sort((a, b) => (a > b ? 1 : -1))\n      .join(\",\")\n  );\n});\n\ntest(\"can get fiat by coin type\", () => {\n  expect(getFiatCurrencyByTicker(\"USD\").units[0]).toMatchObject({\n    magnitude: 2,\n  });\n  expect(getFiatCurrencyByTicker(\"EUR\").units[0]).toMatchObject({\n    magnitude: 2,\n  });\n  // this is not a fiat \\o/\n  expect(() => getFiatCurrencyByTicker(\"USDT\").units[0]).toThrow();\n  expect(hasFiatCurrencyTicker(\"USD\")).toBe(true);\n  expect(hasFiatCurrencyTicker(\"USDT\")).toBe(false);\n});\n\ntest(\"all USDT are countervalue enabled\", () => {\n  const tokens = listTokens().filter(\n    (t) => t.ticker === \"USDT\" && !t.parentCurrency.isTestnetFor\n  );\n  expect(tokens.map((t) => t.id).sort()).toMatchSnapshot();\n  expect(tokens.every((t) => t.disableCountervalue === false)).toBe(true);\n});\n\ntest(\"can register a new coin externally\", () => {\n  const coinId = \"mycoin\";\n  expect(() => getCryptoCurrencyById(\"mycoin\")).toThrow(\n    `currency with id \"${coinId}\" not found`\n  );\n  const mycoin = {\n    type: \"CryptoCurrency\",\n    id: coinId,\n    coinType: 8008,\n    name: \"MyCoin\",\n    managerAppName: \"MyCoin\",\n    ticker: \"MYC\",\n    countervalueTicker: \"MYC\",\n    scheme: \"mycoin\",\n    color: \"#ff0000\",\n    family: \"mycoin\",\n    units: [\n      {\n        name: \"MYC\",\n        code: \"MYC\",\n        magnitude: 8,\n      },\n      {\n        name: \"SmallestUnit\",\n        code: \"SMALLESTUNIT\",\n        magnitude: 0,\n      },\n    ],\n    explorerViews: [\n      {\n        address: \"https://mycoinexplorer.com/account/$address\",\n        tx: \"https://mycoinexplorer.com/transaction/$hash\",\n        token: \"https://mycoinexplorer.com/token/$contractAddress/?a=$address\",\n      },\n    ],\n  };\n  registerCryptoCurrency(coinId, mycoin);\n  expect(getCryptoCurrencyById(coinId)).toEqual(mycoin);\n});\n"],"file":"currencies.test.js"}