{"version":3,"sources":["../src/Eth.js"],"names":["hexBuffer","str","Buffer","from","startsWith","slice","maybeHexBuffer","remapTransactionRelatedErrors","e","statusCode","EthAppPleaseEnableContractData","Eth","constructor","transport","scrambleKey","decorateAppAPIMethods","getAddress","path","boolDisplay","boolChaincode","paths","buffer","alloc","length","forEach","element","index","writeUInt32BE","send","then","response","result","publicKeyLength","addressLength","publicKey","toString","address","chainCode","provideERC20TokenInformation","data","signTransaction","rawTxHex","offset","rawTx","toSend","rlpTx","rlpOffset","rlpVrs","maxChunkSize","chunkSize","copy","push","i","apduResponse","v","r","s","getAppConfiguration","arbitraryDataEnabled","erc20ProvisioningNecessary","starkEnabled","version","signPersonalMessage","messageHex","message","signEIP712HashedMessage","domainSeparatorHex","hashStructMessageHex","domainSeparator","hashStruct","starkGetPublicKey","starkSignOrder","sourceTokenAddress","sourceQuantization","destinationTokenAddress","destinationQuantization","sourceVault","destinationVault","amountSell","amountBuy","nonce","timestamp","sourceTokenAddressHex","destinationTokenAddressHex","padStart","starkSignTransfer","transferTokenAddress","transferQuantization","targetPublicKey","amountTransfer","transferTokenAddressHex","targetPublicKeyHex","starkProvideQuantum","operationContract","operationQuantization","operationContractHex"],"mappings":"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","sourcesContent":["/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//@flow\n\n// FIXME drop:\nimport { splitPath, foreach } from \"./utils\";\nimport { EthAppPleaseEnableContractData } from \"@ledgerhq/errors\";\nimport type Transport from \"@ledgerhq/hw-transport\";\nimport { BigNumber } from \"bignumber.js\";\nimport { encode, decode } from \"rlp\";\n\nfunction hexBuffer(str: string): Buffer {\n  return Buffer.from(str.startsWith(\"0x\") ? str.slice(2) : str, \"hex\");\n}\n\nfunction maybeHexBuffer(str: ?string): ?Buffer {\n  if (!str) return null;\n  return hexBuffer(str);\n}\n\nconst remapTransactionRelatedErrors = (e) => {\n  if (e && e.statusCode === 0x6a80) {\n    return new EthAppPleaseEnableContractData(\n      \"Please enable Contract data on the Ethereum app Settings\"\n    );\n  }\n  return e;\n};\n\n/**\n * Ethereum API\n *\n * @example\n * import Eth from \"@ledgerhq/hw-app-eth\";\n * const eth = new Eth(transport)\n */\nexport default class Eth {\n  transport: Transport<*>;\n\n  constructor(transport: Transport<*>, scrambleKey: string = \"w0w\") {\n    this.transport = transport;\n    transport.decorateAppAPIMethods(\n      this,\n      [\n        \"getAddress\",\n        \"provideERC20TokenInformation\",\n        \"signTransaction\",\n        \"signPersonalMessage\",\n        \"getAppConfiguration\",\n        \"starkGetPublicKey\",\n        \"starkSignOrder\",\n        \"starkSignTransfer\",\n        \"starkProvideQuantum\",\n      ],\n      scrambleKey\n    );\n  }\n\n  /**\n   * get Ethereum address for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @option boolChaincode optionally enable or not the chaincode request\n   * @return an object with a publicKey, address and (optionally) chainCode\n   * @example\n   * eth.getAddress(\"44'/60'/0'/0/0\").then(o => o.address)\n   */\n  getAddress(\n    path: string,\n    boolDisplay?: boolean,\n    boolChaincode?: boolean\n  ): Promise<{\n    publicKey: string,\n    address: string,\n    chainCode?: string,\n  }> {\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport\n      .send(\n        0xe0,\n        0x02,\n        boolDisplay ? 0x01 : 0x00,\n        boolChaincode ? 0x01 : 0x00,\n        buffer\n      )\n      .then((response) => {\n        let result = {};\n        let publicKeyLength = response[0];\n        let addressLength = response[1 + publicKeyLength];\n        result.publicKey = response\n          .slice(1, 1 + publicKeyLength)\n          .toString(\"hex\");\n        result.address =\n          \"0x\" +\n          response\n            .slice(\n              1 + publicKeyLength + 1,\n              1 + publicKeyLength + 1 + addressLength\n            )\n            .toString(\"ascii\");\n        if (boolChaincode) {\n          result.chainCode = response\n            .slice(\n              1 + publicKeyLength + 1 + addressLength,\n              1 + publicKeyLength + 1 + addressLength + 32\n            )\n            .toString(\"hex\");\n        }\n        return result;\n      });\n  }\n\n  /**\n   * This commands provides a trusted description of an ERC 20 token\n   * to associate a contract address with a ticker and number of decimals.\n   *\n   * It shall be run immediately before performing a transaction involving a contract\n   * calling this contract address to display the proper token information to the user if necessary.\n   *\n   * @param {*} info: a blob from \"erc20.js\" utilities that contains all token information.\n   *\n   * @example\n   * import { byContractAddress } from \"@ledgerhq/hw-app-eth/erc20\"\n   * const zrxInfo = byContractAddress(\"0xe41d2489571d322189246dafa5ebde1f4699f498\")\n   * if (zrxInfo) await appEth.provideERC20TokenInformation(zrxInfo)\n   * const signed = await appEth.signTransaction(path, rawTxHex)\n   */\n  provideERC20TokenInformation({ data }: { data: Buffer }): Promise<boolean> {\n    return this.transport.send(0xe0, 0x0a, 0x00, 0x00, data).then(\n      () => true,\n      (e) => {\n        if (e && e.statusCode === 0x6d00) {\n          // this case happen for older version of ETH app, since older app version had the ERC20 data hardcoded, it's fine to assume it worked.\n          // we return a flag to know if the call was effective or not\n          return false;\n        }\n        throw e;\n      }\n    );\n  }\n\n  /**\n   * You can sign a transaction and retrieve v, r, s given the raw transaction and the BIP 32 path of the account to sign\n   * @example\n   eth.signTransaction(\"44'/60'/0'/0/0\", \"e8018504e3b292008252089428ee52a8f3d6e5d15f8b131996950d7f296c7952872bd72a2487400080\").then(result => ...)\n   */\n  signTransaction(\n    path: string,\n    rawTxHex: string\n  ): Promise<{\n    s: string,\n    v: string,\n    r: string,\n  }> {\n    let paths = splitPath(path);\n    let offset = 0;\n    let rawTx = Buffer.from(rawTxHex, \"hex\");\n    let toSend = [];\n    let response;\n    // Check if the TX is encoded following EIP 155\n    let rlpTx = decode(rawTx);\n    let rlpOffset = 0;\n    if (rlpTx.length > 6) {\n      let rlpVrs = encode(rlpTx.slice(-3));\n      rlpOffset = rawTx.length - (rlpVrs.length - 1);\n    }\n    while (offset !== rawTx.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 : 150;\n      let chunkSize =\n        offset + maxChunkSize > rawTx.length\n          ? rawTx.length - offset\n          : maxChunkSize;\n      if (rlpOffset != 0 && offset + chunkSize == rlpOffset) {\n        // Make sure that the chunk doesn't end right on the EIP 155 marker if set\n        chunkSize--;\n      }\n      let buffer = Buffer.alloc(\n        offset === 0 ? 1 + paths.length * 4 + chunkSize : chunkSize\n      );\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        rawTx.copy(buffer, 1 + 4 * paths.length, offset, offset + chunkSize);\n      } else {\n        rawTx.copy(buffer, 0, offset, offset + chunkSize);\n      }\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n    return foreach(toSend, (data, i) =>\n      this.transport\n        .send(0xe0, 0x04, i === 0 ? 0x00 : 0x80, 0x00, data)\n        .then((apduResponse) => {\n          response = apduResponse;\n        })\n    ).then(\n      () => {\n        const v = response.slice(0, 1).toString(\"hex\");\n        const r = response.slice(1, 1 + 32).toString(\"hex\");\n        const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n        return { v, r, s };\n      },\n      (e) => {\n        throw remapTransactionRelatedErrors(e);\n      }\n    );\n  }\n\n  /**\n   */\n  getAppConfiguration(): Promise<{\n    arbitraryDataEnabled: number,\n    erc20ProvisioningNecessary: number,\n    starkEnabled: number,\n    version: string,\n  }> {\n    return this.transport.send(0xe0, 0x06, 0x00, 0x00).then((response) => {\n      let result = {};\n      result.arbitraryDataEnabled = response[0] & 0x01;\n      result.erc20ProvisioningNecessary = response[0] & 0x02;\n      result.starkEnabled = response[0] & 0x04;\n      result.version = \"\" + response[1] + \".\" + response[2] + \".\" + response[3];\n      return result;\n    });\n  }\n\n  /**\n  * You can sign a message according to eth_sign RPC call and retrieve v, r, s given the message and the BIP 32 path of the account to sign.\n  * @example\neth.signPersonalMessage(\"44'/60'/0'/0/0\", Buffer.from(\"test\").toString(\"hex\")).then(result => {\n  var v = result['v'] - 27;\n  v = v.toString(16);\n  if (v.length < 2) {\n    v = \"0\" + v;\n  }\n  console.log(\"Signature 0x\" + result['r'] + result['s'] + v);\n})\n   */\n  signPersonalMessage(\n    path: string,\n    messageHex: string\n  ): Promise<{\n    v: number,\n    s: string,\n    r: string,\n  }> {\n    let paths = splitPath(path);\n    let offset = 0;\n    let message = Buffer.from(messageHex, \"hex\");\n    let toSend = [];\n    let response;\n    while (offset !== message.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 - 4 : 150;\n      let chunkSize =\n        offset + maxChunkSize > message.length\n          ? message.length - offset\n          : maxChunkSize;\n      let buffer = Buffer.alloc(\n        offset === 0 ? 1 + paths.length * 4 + 4 + chunkSize : chunkSize\n      );\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        buffer.writeUInt32BE(message.length, 1 + 4 * paths.length);\n        message.copy(\n          buffer,\n          1 + 4 * paths.length + 4,\n          offset,\n          offset + chunkSize\n        );\n      } else {\n        message.copy(buffer, 0, offset, offset + chunkSize);\n      }\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n    return foreach(toSend, (data, i) =>\n      this.transport\n        .send(0xe0, 0x08, i === 0 ? 0x00 : 0x80, 0x00, data)\n        .then((apduResponse) => {\n          response = apduResponse;\n        })\n    ).then(() => {\n      const v = response[0];\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return { v, r, s };\n    });\n  }\n\n  /**\n  * Sign a prepared message following web3.eth.signTypedData specification. The host computes the domain separator and hashStruct(message)\n  * @example\n  eth.signEIP712HashedMessage(\"44'/60'/0'/0/0\", Buffer.from(\"0101010101010101010101010101010101010101010101010101010101010101\").toString(\"hex\"), Buffer.from(\"0202020202020202020202020202020202020202020202020202020202020202\").toString(\"hex\")).then(result => {\n  var v = result['v'] - 27;\n  v = v.toString(16);\n  if (v.length < 2) {\n    v = \"0\" + v;\n  }\n  console.log(\"Signature 0x\" + result['r'] + result['s'] + v);\n})\n   */\n  signEIP712HashedMessage(\n    path: string,\n    domainSeparatorHex: string,\n    hashStructMessageHex: string\n  ): Promise<{\n    v: number,\n    s: string,\n    r: string,\n  }> {\n    const domainSeparator = hexBuffer(domainSeparatorHex);\n    const hashStruct = hexBuffer(hashStructMessageHex);\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4 + 32 + 32, 0);\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    domainSeparator.copy(buffer, offset);\n    offset += 32;\n    hashStruct.copy(buffer, offset);\n    return this.transport\n      .send(0xe0, 0x0c, 0x00, 0x00, buffer)\n      .then((response) => {\n        const v = response[0];\n        const r = response.slice(1, 1 + 32).toString(\"hex\");\n        const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n        return { v, r, s };\n      });\n  }\n\n  /**\n   * get Stark public key for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @return the Stark public key\n   */\n  starkGetPublicKey(path: string, boolDisplay?: boolean): Promise<Buffer> {\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport\n      .send(0xf0, 0x02, boolDisplay ? 0x01 : 0x00, 0x00, buffer)\n      .then((response) => {\n        return response.slice(0, response.length - 2);\n      });\n  }\n\n  /**\n   * sign a Stark order\n   * @param path a path in BIP 32 format\n   * @option sourceTokenAddress contract address of the source token (not present for ETH)\n   * @param sourceQuantization quantization used for the source token\n   * @option destinationTokenAddress contract address of the destination token (not present for ETH)\n   * @param destinationQuantization quantization used for the destination token\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountSell amount to sell\n   * @param amountBuy amount to buy\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @return the signature\n   */\n  starkSignOrder(\n    path: string,\n    sourceTokenAddress?: string,\n    sourceQuantization: BigNumber,\n    destinationTokenAddress?: string,\n    destinationQuantization: BigNumber,\n    sourceVault: number,\n    destinationVault: number,\n    amountSell: BigNumber,\n    amountBuy: BigNumber,\n    nonce: number,\n    timestamp: number\n  ): Promise<Buffer> {\n    const sourceTokenAddressHex = maybeHexBuffer(sourceTokenAddress);\n    const destinationTokenAddressHex = maybeHexBuffer(destinationTokenAddress);\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(\n      1 + paths.length * 4 + 20 + 32 + 20 + 32 + 4 + 4 + 8 + 8 + 4 + 4,\n      0\n    );\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    if (sourceTokenAddressHex) {\n      sourceTokenAddressHex.copy(buffer, offset);\n    }\n    offset += 20;\n    Buffer.from(sourceQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(\n      buffer,\n      offset\n    );\n    offset += 32;\n    if (destinationTokenAddressHex) {\n      destinationTokenAddressHex.copy(buffer, offset);\n    }\n    offset += 20;\n    Buffer.from(\n      destinationQuantization.toString(16).padStart(64, \"0\"),\n      \"hex\"\n    ).copy(buffer, offset);\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountSell.toString(16).padStart(16, \"0\"), \"hex\").copy(\n      buffer,\n      offset\n    );\n    offset += 8;\n    Buffer.from(amountBuy.toString(16).padStart(16, \"0\"), \"hex\").copy(\n      buffer,\n      offset\n    );\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n    return this.transport\n      .send(0xf0, 0x04, 0x01, 0x00, buffer)\n      .then((response) => {\n        const r = response.slice(1, 1 + 32).toString(\"hex\");\n        const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n        return { r, s };\n      });\n  }\n\n  /**\n   * sign a Stark transfer\n   * @param path a path in BIP 32 format\n   * @option transferTokenAddress contract address of the token to be transferred (not present for ETH)\n   * @param transferQuantization quantization used for the token to be transferred\n   * @param targetPublicKey target Stark public key\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountTransfer amount to transfer\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @return the signature\n   */\n  starkSignTransfer(\n    path: string,\n    transferTokenAddress?: string,\n    transferQuantization: BigNumber,\n    targetPublicKey: string,\n    sourceVault: number,\n    destinationVault: number,\n    amountTransfer: BigNumber,\n    nonce: number,\n    timestamp: number\n  ): Promise<Buffer> {\n    const transferTokenAddressHex = maybeHexBuffer(transferTokenAddress);\n    const targetPublicKeyHex = hexBuffer(targetPublicKey);\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(\n      1 + paths.length * 4 + 20 + 32 + 32 + 4 + 4 + 8 + 4 + 4,\n      0\n    );\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    if (transferTokenAddressHex) {\n      transferTokenAddressHex.copy(buffer, offset);\n    }\n    offset += 20;\n    Buffer.from(\n      transferQuantization.toString(16).padStart(64, \"0\"),\n      \"hex\"\n    ).copy(buffer, offset);\n    offset += 32;\n    targetPublicKeyHex.copy(buffer, offset);\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountTransfer.toString(16).padStart(16, \"0\"), \"hex\").copy(\n      buffer,\n      offset\n    );\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n    return this.transport\n      .send(0xf0, 0x04, 0x02, 0x00, buffer)\n      .then((response) => {\n        const r = response.slice(1, 1 + 32).toString(\"hex\");\n        const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n        return { r, s };\n      });\n  }\n\n  /**\n   * provide quantization information before singing a deposit or withdrawal Stark powered contract call\n   *\n   * It shall be run following a provideERC20TokenInformation call for the given contract\n   *\n   * @param operationContract contract address of the token to be transferred (not present for ETH)\n   * @param operationQuantization quantization used for the token to be transferred\n   */\n  starkProvideQuantum(\n    operationContract?: string,\n    operationQuantization: BigNumber\n  ): Promise<boolean> {\n    const operationContractHex = maybeHexBuffer(operationContract);\n    let buffer = Buffer.alloc(20 + 32, 0);\n    if (operationContractHex) {\n      operationContractHex.copy(buffer, 0);\n    }\n    Buffer.from(\n      operationQuantization.toString(16).padStart(64, \"0\"),\n      \"hex\"\n    ).copy(buffer, 20);\n    return this.transport.send(0xf0, 0x08, 0x00, 0x00, buffer).then(\n      () => true,\n      (e) => {\n        if (e && e.statusCode === 0x6d00) {\n          // this case happen for ETH application versions not supporting Stark extensions\n          return false;\n        }\n        throw e;\n      }\n    );\n  }\n}\n"],"file":"Eth.js"}