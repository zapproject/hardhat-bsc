{"version":3,"sources":["../src/utils.js"],"names":["defer","resolve","reject","promise","Promise","success","failure","splitPath","path","result","components","split","forEach","element","number","parseInt","isNaN","length","push","eachSeries","arr","fun","reduce","p","e","then","foreach","callback","iterate","index","array","res","doIf","condition","asyncWhile","predicate"],"mappings":"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","sourcesContent":["/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//@flow\n\ntype Defer<T> = {\n  promise: Promise<T>,\n  resolve: (T) => void,\n  reject: (any) => void,\n};\n\nexport function defer<T>(): Defer<T> {\n  let resolve, reject;\n  let promise = new Promise(function (success, failure) {\n    resolve = success;\n    reject = failure;\n  });\n  if (!resolve || !reject) throw \"defer() error\"; // this never happens and is just to make flow happy\n  return { promise, resolve, reject };\n}\n\n// TODO use bip32-path library\nexport function splitPath(path: string): number[] {\n  let result = [];\n  let components = path.split(\"/\");\n  components.forEach((element) => {\n    let number = parseInt(element, 10);\n    if (isNaN(number)) {\n      return; // FIXME shouldn't it throws instead?\n    }\n    if (element.length > 1 && element[element.length - 1] === \"'\") {\n      number += 0x80000000;\n    }\n    result.push(number);\n  });\n  return result;\n}\n\n// TODO use async await\n\nexport function eachSeries<A>(arr: A[], fun: (A) => Promise<*>): Promise<*> {\n  return arr.reduce((p, e) => p.then(() => fun(e)), Promise.resolve());\n}\n\nexport function foreach<T, A>(\n  arr: T[],\n  callback: (T, number) => Promise<A>\n): Promise<A[]> {\n  function iterate(index, array, result) {\n    if (index >= array.length) {\n      return result;\n    } else\n      return callback(array[index], index).then(function (res) {\n        result.push(res);\n        return iterate(index + 1, array, result);\n      });\n  }\n  return Promise.resolve().then(() => iterate(0, arr, []));\n}\n\nexport function doIf(\n  condition: boolean,\n  callback: () => any | Promise<any>\n): Promise<void> {\n  return Promise.resolve().then(() => {\n    if (condition) {\n      return callback();\n    }\n  });\n}\n\nexport function asyncWhile<T>(\n  predicate: () => boolean,\n  callback: () => Promise<T>\n): Promise<Array<T>> {\n  function iterate(result) {\n    if (!predicate()) {\n      return result;\n    } else {\n      return callback().then((res) => {\n        result.push(res);\n        return iterate(result);\n      });\n    }\n  }\n  return Promise.resolve([]).then(iterate);\n}\n"],"file":"utils.js"}