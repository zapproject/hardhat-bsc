{"version":3,"sources":["../src/TransportNodeHid.js"],"names":["listenDevicesDebounce","listenDevicesPollingSkip","TransportNodeHid","TransportNodeHidNoEvents","open","path","Promise","resolve","then","HID","device","TransportError","isSupported","list","setListenDevicesDebounce","delay","setListenDevicesPollingSkip","conditionToSkip","setListenDevicesDebug","console","warn","listen","observer","unsubscribed","devices","descriptor","deviceModel","productId","next","type","events","stop","onAdd","onRemove","on","unsubscribe","removeListener"],"mappings":"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","sourcesContent":["//@flow\n\nimport HID from \"node-hid\";\nimport TransportNodeHidNoEvents, {\n  getDevices,\n} from \"@ledgerhq/hw-transport-node-hid-noevents\";\nimport type {\n  Observer,\n  DescriptorEvent,\n  Subscription,\n} from \"@ledgerhq/hw-transport\";\nimport { identifyUSBProductId } from \"@ledgerhq/devices\";\nimport { TransportError } from \"@ledgerhq/errors\";\nimport listenDevices from \"./listenDevices\";\n\nlet listenDevicesDebounce = 500;\nlet listenDevicesPollingSkip = () => false;\n\n/**\n * node-hid Transport implementation\n * @example\n * import TransportNodeHid from \"@ledgerhq/hw-transport-node-hid\";\n * ...\n * TransportNodeHid.create().then(transport => ...)\n */\nexport default class TransportNodeHid extends TransportNodeHidNoEvents {\n  /**\n   *\n   */\n  static isSupported = TransportNodeHidNoEvents.isSupported;\n\n  /**\n   *\n   */\n  static list = TransportNodeHidNoEvents.list;\n\n  /**\n   *\n   */\n  static setListenDevicesDebounce = (delay: number) => {\n    listenDevicesDebounce = delay;\n  };\n\n  /**\n   *\n   */\n  static setListenDevicesPollingSkip = (conditionToSkip: () => boolean) => {\n    listenDevicesPollingSkip = conditionToSkip;\n  };\n\n  /**\n   *\n   */\n  static setListenDevicesDebug = () => {\n    console.warn(\n      \"setListenDevicesDebug is deprecated. Use @ledgerhq/logs instead. No logs will get emitted there anymore.\"\n    );\n  };\n\n  /**\n   */\n  static listen = (\n    observer: Observer<DescriptorEvent<?string>>\n  ): Subscription => {\n    let unsubscribed = false;\n    Promise.resolve(getDevices()).then((devices) => {\n      // this needs to run asynchronously so the subscription is defined during this phase\n      for (const device of devices) {\n        if (!unsubscribed) {\n          const descriptor: string = device.path;\n          const deviceModel = identifyUSBProductId(device.productId);\n          observer.next({ type: \"add\", descriptor, device, deviceModel });\n        }\n      }\n    });\n    const { events, stop } = listenDevices(\n      listenDevicesDebounce,\n      listenDevicesPollingSkip\n    );\n\n    const onAdd = (device) => {\n      if (unsubscribed || !device) return;\n      const deviceModel = identifyUSBProductId(device.productId);\n      observer.next({\n        type: \"add\",\n        descriptor: device.path,\n        deviceModel,\n        device,\n      });\n    };\n    const onRemove = (device) => {\n      if (unsubscribed || !device) return;\n      const deviceModel = identifyUSBProductId(device.productId);\n      observer.next({\n        type: \"remove\",\n        descriptor: device.path,\n        deviceModel,\n        device,\n      });\n    };\n    events.on(\"add\", onAdd);\n    events.on(\"remove\", onRemove);\n    function unsubscribe() {\n      unsubscribed = true;\n      events.removeListener(\"add\", onAdd);\n      events.removeListener(\"remove\", onRemove);\n      stop();\n    }\n    return { unsubscribe };\n  };\n\n  /**\n   * if path=\"\" is not provided, the library will take the first device\n   */\n  static open(path: ?string) {\n    return Promise.resolve().then(() => {\n      if (path) {\n        return new TransportNodeHid(new HID.HID(path));\n      }\n      const device = getDevices()[0];\n      if (!device) throw new TransportError(\"NoDevice\", \"NoDevice\");\n      return new TransportNodeHid(new HID.HID(device.path));\n    });\n  }\n}\n"],"file":"TransportNodeHid.js"}