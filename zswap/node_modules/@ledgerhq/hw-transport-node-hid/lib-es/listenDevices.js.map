{"version":3,"sources":["../src/listenDevices.js"],"names":["EventEmitter","getDevices","log","usb","debounce","delay","listenDevicesPollingSkip","events","setMaxListeners","listDevices","flatDevice","d","path","getFlatDevices","Set","map","getDeviceByPaths","paths","find","includes","lastDevices","poll","changeFound","currentDevices","newDevices","filter","length","emit","removeDevices","debouncedPoll","attachDetected","device","on","detachDetected","stop","cancel","removeListener"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from \"events\";\nimport { getDevices } from \"@ledgerhq/hw-transport-node-hid-noevents\";\nimport { log } from \"@ledgerhq/logs\";\nimport usb from \"usb\";\nimport debounce from \"lodash/debounce\";\n\nexport default (\n  delay: number,\n  listenDevicesPollingSkip: () => boolean\n): ({\n  events: EventEmitter,\n  stop: () => void,\n}) => {\n  const events = new EventEmitter();\n  events.setMaxListeners(0);\n\n  let listDevices = getDevices();\n\n  const flatDevice = (d) => d.path;\n\n  const getFlatDevices = () => [\n    ...new Set(getDevices().map((d) => flatDevice(d))),\n  ];\n\n  const getDeviceByPaths = (paths) =>\n    listDevices.find((d) => paths.includes(flatDevice(d)));\n\n  let lastDevices = getFlatDevices();\n\n  const poll = () => {\n    if (!listenDevicesPollingSkip()) {\n      log(\"hid-listen\", \"Polling for added or removed devices\");\n\n      let changeFound = false;\n      const currentDevices = getFlatDevices();\n      const newDevices = currentDevices.filter((d) => !lastDevices.includes(d));\n\n      if (newDevices.length > 0) {\n        log(\"hid-listen\", \"New device found:\", newDevices);\n\n        listDevices = getDevices();\n        events.emit(\"add\", getDeviceByPaths(newDevices));\n\n        changeFound = true;\n      } else {\n        log(\"hid-listen\", \"No new device found\");\n      }\n\n      const removeDevices = lastDevices.filter(\n        (d) => !currentDevices.includes(d)\n      );\n\n      if (removeDevices.length > 0) {\n        log(\"hid-listen\", \"Removed device found:\", removeDevices);\n\n        events.emit(\"remove\", getDeviceByPaths(removeDevices));\n        listDevices = listDevices.filter(\n          (d) => !removeDevices.includes(flatDevice(d))\n        );\n\n        changeFound = true;\n      } else {\n        log(\"hid-listen\", \"No removed device found\");\n      }\n\n      if (changeFound) {\n        lastDevices = currentDevices;\n      }\n    } else {\n      log(\"hid-listen\", \"Polling skipped, re-debouncing\");\n      debouncedPoll();\n    }\n  };\n\n  const debouncedPoll = debounce(poll, delay);\n\n  const attachDetected = (device) => {\n    log(\"hid-listen\", \"Device add detected:\", device);\n\n    debouncedPoll();\n  };\n  usb.on(\"attach\", attachDetected);\n  log(\"hid-listen\", \"attach listener added\");\n\n  const detachDetected = (device) => {\n    log(\"hid-listen\", \"Device removal detected:\", device);\n\n    debouncedPoll();\n  };\n  usb.on(\"detach\", detachDetected);\n  log(\"hid-listen\", \"detach listener added\");\n\n  return {\n    stop: () => {\n      log(\n        \"hid-listen\",\n        \"Stop received, removing listeners and cancelling pending debounced polls\"\n      );\n      debouncedPoll.cancel();\n      usb.removeListener(\"attach\", attachDetected);\n      usb.removeListener(\"detach\", detachDetected);\n    },\n    events,\n  };\n};\n"],"file":"listenDevices.js"}