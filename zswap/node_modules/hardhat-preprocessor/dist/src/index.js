"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeConsoleLog = exports.TASK_PREPROCESS = void 0;
require("./type-extensions");
const config_1 = require("hardhat/config");
const types = __importStar(require("hardhat/internal/core/params/argumentTypes"));
const task_names_1 = require("hardhat/builtin-tasks/task-names");
const murmur_128_1 = __importDefault(require("murmur-128"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const util_1 = require("util");
const path_1 = __importDefault(require("path"));
const readdir = util_1.promisify(fs_extra_1.default.readdir);
const stat = util_1.promisify(fs_extra_1.default.stat);
async function getFiles(dir) {
    const subdirs = await readdir(dir);
    const files = await Promise.all(subdirs.map(async (subdir) => {
        const res = path_1.default.resolve(dir, subdir);
        return (await stat(res)).isDirectory() ? getFiles(res) : [res];
    }));
    return files.reduce((a, f) => a.concat(f), []);
}
config_1.extendConfig((config, userConfig) => {
    if (userConfig.preprocess) {
        config.preprocess = userConfig.preprocess;
    }
});
// regex copied from https://github.com/ItsNickBarry/hardhat-log-remover
const importsRegex = /\n?(\s*)?import\s*['"]hardhat\/console.sol['"]\s*;/g;
const callsRegex = /\n?((\s|\/)*)?console\s*\.\s*log\w*\s*\([^;]*\)\s*;/g;
exports.TASK_PREPROCESS = 'preprocess';
function removeConsoleLog(condition) {
    const preprocess = {
        transform: (line, sourceInfo) => {
            return line.replace(importsRegex, '').replace(callsRegex, '');
        },
        settings: { removeLog: true },
    };
    return async (hre) => {
        if (typeof condition === 'function') {
            const cond = condition(hre);
            const promise = cond;
            if (typeof cond === 'object' && 'then' in promise) {
                return promise.then((v) => (v ? preprocess : undefined));
            }
            else if (!cond) {
                return Promise.resolve(undefined);
            }
        }
        return Promise.resolve(preprocess);
    };
}
exports.removeConsoleLog = removeConsoleLog;
function transform(linePreProcessor, file, rawContent) {
    return rawContent
        .split(/\r?\n/)
        .map((line) => {
        const newLine = linePreProcessor(line, { absolutePath: file.absolutePath });
        if (newLine.split(/\r?\n/).length > 1) {
            // prevent lines generated to create more line, this ensure preservation of line number while debugging
            throw new Error(`Line processor cannot create new lines. This ensures that line numbers are preserved`);
        }
        return newLine;
    })
        .join('\n');
}
config_1.task(exports.TASK_PREPROCESS)
    .addOptionalParam('dest', 'destination folder (default to current sources)', undefined, types.string)
    .setAction(async (args, hre) => {
    const linePreProcessor = await getLinePreprocessor(hre);
    const sources = hre.config.paths.sources;
    const destination = args.dest || sources;
    if (linePreProcessor || destination != sources) {
        const files = await getFiles(sources);
        if (files.length > 0) {
            await fs_extra_1.default.ensureDir(destination);
            for (const file of files) {
                const from = path_1.default.relative(sources, file);
                const to = path_1.default.join(destination, from);
                await fs_extra_1.default.ensureDir(path_1.default.dirname(to));
                const content = fs_extra_1.default.readFileSync(file).toString();
                const newContent = linePreProcessor
                    ? transform(linePreProcessor.transform, { absolutePath: file }, content)
                    : content;
                fs_extra_1.default.writeFileSync(to, newContent);
            }
        }
    }
});
let _linePreprocessor;
async function getLinePreprocessor(hre) {
    var _a;
    if (_linePreprocessor !== undefined) {
        return _linePreprocessor;
    }
    const _getLinePreprocessor = (_a = hre.config.preprocess) === null || _a === void 0 ? void 0 : _a.eachLine;
    if (_getLinePreprocessor) {
        const linePreProcessorPromise = _getLinePreprocessor(hre);
        if (typeof linePreProcessorPromise === 'object' && 'then' in linePreProcessorPromise) {
            _linePreprocessor = await linePreProcessorPromise;
        }
        else {
            _linePreprocessor = linePreProcessorPromise;
        }
    }
    return _linePreprocessor || null;
}
config_1.internalTask(task_names_1.TASK_COMPILE_SOLIDITY_READ_FILE).setAction(async ({ absolutePath }, hre, runSuper) => {
    let content = await runSuper({ absolutePath });
    const linePreProcessor = await getLinePreprocessor(hre);
    if (linePreProcessor) {
        let cacheBreaker;
        if (!linePreProcessor.settings) {
            const timeHex = Buffer.from(Date.now().toString()).toString('hex');
            const numCharMissing = 40 - timeHex.length;
            if (numCharMissing > 0) {
                cacheBreaker = '0x' + timeHex.padStart(40, '0');
            }
        }
        else {
            const settingsString = JSON.stringify(linePreProcessor.settings);
            const settingsHash = Buffer.from(murmur_128_1.default(settingsString)).toString('hex');
            cacheBreaker = '0x' + settingsHash.padStart(40, '0');
        }
        for (const compiler of hre.config.solidity.compilers) {
            compiler.settings.libraries = compiler.settings.libraries || {};
            compiler.settings.libraries[''] = compiler.settings.libraries[''] || {};
            compiler.settings.libraries[''] = {
                __CACHE_BREAKER__: cacheBreaker,
            };
        }
        content = transform(linePreProcessor.transform, { absolutePath }, content);
    }
    return content;
});
//# sourceMappingURL=index.js.map